/*++

Copyright (C) 2019 PrimeDevelopers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated Java file in order to allow an easy
 use of Prime Numbers Library

Interface version: 1.2.0

*/

package libprimes;

import com.sun.jna.Library;
import com.sun.jna.Memory;
import com.sun.jna.Native;
import com.sun.jna.Pointer;
import java.lang.ref.Cleaner;


import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;

public class FactorizationCalculator extends Calculator {

	public FactorizationCalculator(LibPrimesWrapper wrapper, Pointer handle) {
		super(wrapper, handle);
	}

	/**
	 * Returns the prime factors of this number (without multiplicity)
	 *
	 * @return The prime factors of this number
	 * @throws LibPrimesException
	 */
	public PrimeFactor[] getPrimeFactors() throws LibPrimesException {
		Pointer countNeededPrimeFactors = new Memory(4);
		mWrapper.checkError(this, mWrapper.libprimes_factorizationcalculator_getprimefactors.invokeInt(new Object[]{mHandle, 0, countNeededPrimeFactors, null}));
		int countPrimeFactors = countNeededPrimeFactors.getInt(0);
		Pointer bufferPrimeFactors = new Memory(Math.max(1, countPrimeFactors * PrimeFactor.SIZE));
		mWrapper.checkError(this, mWrapper.libprimes_factorizationcalculator_getprimefactors.invokeInt(new Object[]{mHandle, countPrimeFactors, countNeededPrimeFactors, bufferPrimeFactors}));
		PrimeFactor primeFactors[] = new PrimeFactor[countPrimeFactors];
		for (int i = 0; i < countPrimeFactors; i++) {
		  primeFactors[i] = new PrimeFactor();
		  primeFactors[i].readFromPointer(bufferPrimeFactors, i * PrimeFactor.SIZE);
		}
		return primeFactors;
	}


}

