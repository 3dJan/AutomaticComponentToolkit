/*++

Copyright (C) 2018 Automatic Component Toolkit Developers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.3.0.

Abstract: This is an autogenerated plain C Header file in order to allow an easy
 use of Prime Numbers Interface

Interface version: 1.3.0

*/

#include "libprimes_types.h"
#include "libprimes_dynamic.h"
#ifdef WIN32
#include <Windows.h>
#else // WIN32
#include <dlfcn.h>
#endif // WIN32

LibPrimesResult InitLibPrimesWrapperTable (sLibPrimesDynamicWrapperTable * pWrapperTable)
{
	if (pWrapperTable == nullptr)
		return LIBPRIMES_ERROR_INVALIDPARAM;
	
	pWrapperTable->m_LibraryHandle = nullptr;
	pWrapperTable->m_Calculator_GetValue = nullptr;
	pWrapperTable->m_Calculator_SetValue = nullptr;
	pWrapperTable->m_Calculator_SetProgressCallback = nullptr;
	pWrapperTable->m_Calculator_Calculate = nullptr;
	pWrapperTable->m_FactorizationCalculator_GetPrimeFactors = nullptr;
	pWrapperTable->m_FactorizationCalculator_CheckPrimeFactors = nullptr;
	pWrapperTable->m_SieveCalculator_GetPrimes = nullptr;
	pWrapperTable->m_CreateFactorizationCalculator = nullptr;
	pWrapperTable->m_CreateSieveCalculator = nullptr;
	pWrapperTable->m_ReleaseInstance = nullptr;
	pWrapperTable->m_GetLibraryVersion = nullptr;
	pWrapperTable->m_SetJournal = nullptr;
	
	return LIBPRIMES_SUCCESS;
}

LibPrimesResult ReleaseLibPrimesWrapperTable (sLibPrimesDynamicWrapperTable * pWrapperTable)
{
	if (pWrapperTable == nullptr)
		return LIBPRIMES_ERROR_INVALIDPARAM;
	
	if (pWrapperTable->m_LibraryHandle != nullptr) {
	#ifdef WIN32
		HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
		FreeLibrary (hModule);
	#else // WIN32
		dlclose (pWrapperTable->m_LibraryHandle);
	#endif // WIN32
		return InitLibPrimesWrapperTable (pWrapperTable);
	}
	
	return LIBPRIMES_SUCCESS;
}

LibPrimesResult LoadLibPrimesWrapperTable (sLibPrimesDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
{
	if (pWrapperTable == nullptr)
		return LIBPRIMES_ERROR_INVALIDPARAM;
	if (pLibraryFileName == nullptr)
		return LIBPRIMES_ERROR_INVALIDPARAM;
	
	#ifdef WIN32
	HMODULE hLibrary = LoadLibraryA (pLibraryFileName);
	if (hLibrary == 0) 
		return LIBPRIMES_ERROR_COULDNOTLOADLIBRARY;
	#else // WIN32
	void* hLibrary = dlopen (pLibraryFileName, RTLD_LAZY);
	if (hLibrary == 0) 
		return LIBPRIMES_ERROR_COULDNOTLOADLIBRARY;
	dlerror();
	#endif // WIN32
	
	#ifdef WIN32
	pWrapperTable->m_Calculator_GetValue = (PLibPrimesCalculator_GetValuePtr) GetProcAddress (hLibrary, "libprimes_calculator_getvalue");
	#else // WIN32
	pWrapperTable->m_Calculator_GetValue = (PLibPrimesCalculator_GetValuePtr) dlsym (hLibrary, "libprimes_calculator_getvalue");
	dlerror();
	#endif // WIN32
	if (pWrapperTable->m_Calculator_GetValue == nullptr)
		return LIBPRIMES_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef WIN32
	pWrapperTable->m_Calculator_SetValue = (PLibPrimesCalculator_SetValuePtr) GetProcAddress (hLibrary, "libprimes_calculator_setvalue");
	#else // WIN32
	pWrapperTable->m_Calculator_SetValue = (PLibPrimesCalculator_SetValuePtr) dlsym (hLibrary, "libprimes_calculator_setvalue");
	dlerror();
	#endif // WIN32
	if (pWrapperTable->m_Calculator_SetValue == nullptr)
		return LIBPRIMES_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef WIN32
	pWrapperTable->m_Calculator_SetProgressCallback = (PLibPrimesCalculator_SetProgressCallbackPtr) GetProcAddress (hLibrary, "libprimes_calculator_setprogresscallback");
	#else // WIN32
	pWrapperTable->m_Calculator_SetProgressCallback = (PLibPrimesCalculator_SetProgressCallbackPtr) dlsym (hLibrary, "libprimes_calculator_setprogresscallback");
	dlerror();
	#endif // WIN32
	if (pWrapperTable->m_Calculator_SetProgressCallback == nullptr)
		return LIBPRIMES_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef WIN32
	pWrapperTable->m_Calculator_Calculate = (PLibPrimesCalculator_CalculatePtr) GetProcAddress (hLibrary, "libprimes_calculator_calculate");
	#else // WIN32
	pWrapperTable->m_Calculator_Calculate = (PLibPrimesCalculator_CalculatePtr) dlsym (hLibrary, "libprimes_calculator_calculate");
	dlerror();
	#endif // WIN32
	if (pWrapperTable->m_Calculator_Calculate == nullptr)
		return LIBPRIMES_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef WIN32
	pWrapperTable->m_FactorizationCalculator_GetPrimeFactors = (PLibPrimesFactorizationCalculator_GetPrimeFactorsPtr) GetProcAddress (hLibrary, "libprimes_factorizationcalculator_getprimefactors");
	#else // WIN32
	pWrapperTable->m_FactorizationCalculator_GetPrimeFactors = (PLibPrimesFactorizationCalculator_GetPrimeFactorsPtr) dlsym (hLibrary, "libprimes_factorizationcalculator_getprimefactors");
	dlerror();
	#endif // WIN32
	if (pWrapperTable->m_FactorizationCalculator_GetPrimeFactors == nullptr)
		return LIBPRIMES_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef WIN32
	pWrapperTable->m_FactorizationCalculator_CheckPrimeFactors = (PLibPrimesFactorizationCalculator_CheckPrimeFactorsPtr) GetProcAddress (hLibrary, "libprimes_factorizationcalculator_checkprimefactors");
	#else // WIN32
	pWrapperTable->m_FactorizationCalculator_CheckPrimeFactors = (PLibPrimesFactorizationCalculator_CheckPrimeFactorsPtr) dlsym (hLibrary, "libprimes_factorizationcalculator_checkprimefactors");
	dlerror();
	#endif // WIN32
	if (pWrapperTable->m_FactorizationCalculator_CheckPrimeFactors == nullptr)
		return LIBPRIMES_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef WIN32
	pWrapperTable->m_SieveCalculator_GetPrimes = (PLibPrimesSieveCalculator_GetPrimesPtr) GetProcAddress (hLibrary, "libprimes_sievecalculator_getprimes");
	#else // WIN32
	pWrapperTable->m_SieveCalculator_GetPrimes = (PLibPrimesSieveCalculator_GetPrimesPtr) dlsym (hLibrary, "libprimes_sievecalculator_getprimes");
	dlerror();
	#endif // WIN32
	if (pWrapperTable->m_SieveCalculator_GetPrimes == nullptr)
		return LIBPRIMES_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef WIN32
	pWrapperTable->m_CreateFactorizationCalculator = (PLibPrimesCreateFactorizationCalculatorPtr) GetProcAddress (hLibrary, "libprimes_createfactorizationcalculator");
	#else // WIN32
	pWrapperTable->m_CreateFactorizationCalculator = (PLibPrimesCreateFactorizationCalculatorPtr) dlsym (hLibrary, "libprimes_createfactorizationcalculator");
	dlerror();
	#endif // WIN32
	if (pWrapperTable->m_CreateFactorizationCalculator == nullptr)
		return LIBPRIMES_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef WIN32
	pWrapperTable->m_CreateSieveCalculator = (PLibPrimesCreateSieveCalculatorPtr) GetProcAddress (hLibrary, "libprimes_createsievecalculator");
	#else // WIN32
	pWrapperTable->m_CreateSieveCalculator = (PLibPrimesCreateSieveCalculatorPtr) dlsym (hLibrary, "libprimes_createsievecalculator");
	dlerror();
	#endif // WIN32
	if (pWrapperTable->m_CreateSieveCalculator == nullptr)
		return LIBPRIMES_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef WIN32
	pWrapperTable->m_ReleaseInstance = (PLibPrimesReleaseInstancePtr) GetProcAddress (hLibrary, "libprimes_releaseinstance");
	#else // WIN32
	pWrapperTable->m_ReleaseInstance = (PLibPrimesReleaseInstancePtr) dlsym (hLibrary, "libprimes_releaseinstance");
	dlerror();
	#endif // WIN32
	if (pWrapperTable->m_ReleaseInstance == nullptr)
		return LIBPRIMES_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef WIN32
	pWrapperTable->m_GetLibraryVersion = (PLibPrimesGetLibraryVersionPtr) GetProcAddress (hLibrary, "libprimes_getlibraryversion");
	#else // WIN32
	pWrapperTable->m_GetLibraryVersion = (PLibPrimesGetLibraryVersionPtr) dlsym (hLibrary, "libprimes_getlibraryversion");
	dlerror();
	#endif // WIN32
	if (pWrapperTable->m_GetLibraryVersion == nullptr)
		return LIBPRIMES_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef WIN32
	pWrapperTable->m_SetJournal = (PLibPrimesSetJournalPtr) GetProcAddress (hLibrary, "libprimes_setjournal");
	#else // WIN32
	pWrapperTable->m_SetJournal = (PLibPrimesSetJournalPtr) dlsym (hLibrary, "libprimes_setjournal");
	dlerror();
	#endif // WIN32
	if (pWrapperTable->m_SetJournal == nullptr)
		return LIBPRIMES_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	pWrapperTable->m_LibraryHandle = hLibrary;
	return LIBPRIMES_SUCCESS;
}

