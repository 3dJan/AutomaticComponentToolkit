/*++

Copyright (C) 2018 Automatic Component Toolkit Developers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.2.4.

Abstract: This is an autogenerated C++ Wrapper Implementation file in order to allow 
an easy use of Prime Numbers Interface

Interface version: 1.2.0

*/

#include "libprimes.hpp"

#include <vector>

namespace LibPrimes {

/*************************************************************************************************************************
 Class ELibPrimesException 
**************************************************************************************************************************/
    ELibPrimesException::ELibPrimesException(LibPrimesResult errorcode)
       : std::runtime_error ("LibPrimes Error " + std::to_string (errorcode))
    {
        m_errorcode = errorcode;
    }

    LibPrimesResult ELibPrimesException::getErrorCode ()
    {
        return m_errorcode;
    }

/*************************************************************************************************************************
 Class CLibPrimesBaseClass 
**************************************************************************************************************************/

    CLibPrimesBaseClass::CLibPrimesBaseClass(LibPrimesHandle pHandle)
    {
        m_pHandle = pHandle;
    }

    CLibPrimesBaseClass::~CLibPrimesBaseClass()
    {
        CLibPrimesWrapper::ReleaseInstance(this);
    }

    void CLibPrimesBaseClass::CheckError(LibPrimesResult nResult)
    {
        CLibPrimesWrapper::CheckError(m_pHandle, nResult);
    }

    LibPrimesHandle CLibPrimesBaseClass::GetHandle()
    {
        return m_pHandle;
    }

     
/*************************************************************************************************************************
 Class CLibPrimesCalculator 
**************************************************************************************************************************/
    /**
    * CLibPrimesCalculator::CLibPrimesCalculator - Constructor for Calculator class.
    */
    CLibPrimesCalculator::CLibPrimesCalculator (LibPrimesHandle pHandle)
     : CLibPrimesBaseClass (pHandle)
    { }
    
    /**
    * CLibPrimesCalculator::GetValue - Returns the current value of this Calculator
    * @return The current value of this Calculator
    */
    unsigned long long CLibPrimesCalculator::GetValue ()
    {
        unsigned long long resultValue = 0;
        CheckError ( libprimes_calculator_getvalue (m_pHandle, &resultValue) );
        return resultValue;
    }
    
    /**
    * CLibPrimesCalculator::SetValue - Sets the value to be factorized
    * @param[in] nValue - The value to be factorized
    */
    void CLibPrimesCalculator::SetValue (const unsigned long long nValue)
    {
        CheckError ( libprimes_calculator_setvalue (m_pHandle, nValue) );
    }
    
    /**
    * CLibPrimesCalculator::SetProgressCallback - Sets the progress callback function
    * @param[in] pProgressCallback - The progress callback
    */
    void CLibPrimesCalculator::SetProgressCallback (const LibPrimesProgressCallback pProgressCallback)
    {
        CheckError ( libprimes_calculator_setprogresscallback (m_pHandle, pProgressCallback) );
    }
    
    /**
    * CLibPrimesCalculator::Calculate - Performs the specific calculation of this Calculator
    */
    void CLibPrimesCalculator::Calculate ()
    {
        CheckError ( libprimes_calculator_calculate (m_pHandle) );
    }
     
/*************************************************************************************************************************
 Class CLibPrimesFactorizationCalculator 
**************************************************************************************************************************/
    /**
    * CLibPrimesFactorizationCalculator::CLibPrimesFactorizationCalculator - Constructor for FactorizationCalculator class.
    */
    CLibPrimesFactorizationCalculator::CLibPrimesFactorizationCalculator (LibPrimesHandle pHandle)
     : CLibPrimesCalculator (pHandle)
    { }
    
    /**
    * CLibPrimesFactorizationCalculator::GetPrimeFactors - Returns the prime factors of this number (without multiplicity)
    * @param[out] PrimeFactorsBuffer - The prime factors of this number
    */
    void CLibPrimesFactorizationCalculator::GetPrimeFactors (std::vector<sLibPrimesPrimeFactor> & PrimeFactorsBuffer)
    {
        unsigned int elementsNeededPrimeFactors = 0;
        unsigned int elementsWrittenPrimeFactors = 0;
        CheckError ( libprimes_factorizationcalculator_getprimefactors (m_pHandle, 0, &elementsNeededPrimeFactors, nullptr) );
        PrimeFactorsBuffer.resize(elementsNeededPrimeFactors);
        CheckError ( libprimes_factorizationcalculator_getprimefactors (m_pHandle, elementsNeededPrimeFactors, &elementsWrittenPrimeFactors, PrimeFactorsBuffer.data()) );
    }
     
/*************************************************************************************************************************
 Class CLibPrimesSieveCalculator 
**************************************************************************************************************************/
    /**
    * CLibPrimesSieveCalculator::CLibPrimesSieveCalculator - Constructor for SieveCalculator class.
    */
    CLibPrimesSieveCalculator::CLibPrimesSieveCalculator (LibPrimesHandle pHandle)
     : CLibPrimesCalculator (pHandle)
    { }
    
    /**
    * CLibPrimesSieveCalculator::GetPrimes - Returns all prime numbers lower or equal to the sieve's value
    * @param[out] PrimesBuffer - The primes lower or equal to the sieve's value
    */
    void CLibPrimesSieveCalculator::GetPrimes (std::vector<unsigned long long> & PrimesBuffer)
    {
        unsigned int elementsNeededPrimes = 0;
        unsigned int elementsWrittenPrimes = 0;
        CheckError ( libprimes_sievecalculator_getprimes (m_pHandle, 0, &elementsNeededPrimes, nullptr) );
        PrimesBuffer.resize(elementsNeededPrimes);
        CheckError ( libprimes_sievecalculator_getprimes (m_pHandle, elementsNeededPrimes, &elementsWrittenPrimes, PrimesBuffer.data()) );
    }
    
    /**
    * CLibPrimesWrapper::CreateFactorizationCalculator - Creates a new FactorizationCalculator instance
    * @return New FactorizationCalculator instance
    */
    PLibPrimesFactorizationCalculator CLibPrimesWrapper::CreateFactorizationCalculator ()
    {
        LibPrimesHandle hInstance = nullptr;
        CheckError (nullptr, libprimes_createfactorizationcalculator (&hInstance) );
        return std::make_shared<CLibPrimesFactorizationCalculator> (hInstance);
    }
    
    /**
    * CLibPrimesWrapper::CreateSieveCalculator - Creates a new SieveCalculator instance
    * @return New SieveCalculator instance
    */
    PLibPrimesSieveCalculator CLibPrimesWrapper::CreateSieveCalculator ()
    {
        LibPrimesHandle hInstance = nullptr;
        CheckError (nullptr, libprimes_createsievecalculator (&hInstance) );
        return std::make_shared<CLibPrimesSieveCalculator> (hInstance);
    }
    
    /**
    * CLibPrimesWrapper::ReleaseInstance - Releases the memory of an Instance
    * @param[in] pInstance - Instance Handle
    */
    void CLibPrimesWrapper::ReleaseInstance (CLibPrimesBaseClass * pInstance)
    {
        LibPrimesHandle hInstance = nullptr;
        if (pInstance != nullptr) {
            hInstance = pInstance->GetHandle ();
        };
        CheckError (nullptr, libprimes_releaseinstance (hInstance) );
    }
    
    /**
    * CLibPrimesWrapper::GetLibraryVersion - retrieves the current version of the library.
    * @param[out] nMajor - returns the major version of the library
    * @param[out] nMinor - returns the minor version of the library
    * @param[out] nMicro - returns the micro version of the library
    */
    void CLibPrimesWrapper::GetLibraryVersion (unsigned int & nMajor, unsigned int & nMinor, unsigned int & nMicro)
    {
        CheckError (nullptr, libprimes_getlibraryversion (&nMajor, &nMinor, &nMicro) );
    }
    
    /**
    * CLibPrimesWrapper::SetJournal - Handles Library Journaling
    * @param[in] sFileName - Journal FileName
    */
    void CLibPrimesWrapper::SetJournal (const std::string & sFileName)
    {
        CheckError (nullptr, libprimes_setjournal (sFileName.c_str()) );
    }

    void CLibPrimesWrapper::CheckError(LibPrimesHandle handle, LibPrimesResult nResult)
    {
        if (nResult != 0) 
            throw ELibPrimesException (nResult);
    }


};

