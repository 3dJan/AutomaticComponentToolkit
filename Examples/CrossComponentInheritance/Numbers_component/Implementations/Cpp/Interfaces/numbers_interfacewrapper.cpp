/*++

Copyright (C) 2019 Numbers developers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of Numbers library. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 1.0.0

*/

#include "numbers_abi.hpp"
#include "numbers_interfaces.hpp"
#include "numbers_interfaceexception.hpp"

#include <map>

using namespace Numbers::Impl;


NumbersResult handleNumbersException(IBase * pIBaseClass, ENumbersInterfaceException & Exception)
{
	NumbersResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

NumbersResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	NumbersResult errorCode = NUMBERS_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

NumbersResult handleUnhandledException(IBase * pIBaseClass)
{
	NumbersResult errorCode = NUMBERS_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/
NumbersResult numbers_base_getsymbollookupmethod(Numbers_Base pBase, Numbers_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = (IBase *)pBase.m_hHandle;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ENumbersInterfaceException (NUMBERS_ERROR_INVALIDPARAM);
		IBase* pIBase = dynamic_cast<IBase*>(pIBaseClass);
		if (!pIBase)
			throw ENumbersInterfaceException(NUMBERS_ERROR_INVALIDCAST);
		
		*pSymbolLookupMethod = pIBase->GetSymbolLookupMethod();

		return NUMBERS_SUCCESS;
	}
	catch (ENumbersInterfaceException & Exception) {
		return handleNumbersException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

NumbersResult numbers_base_releaseinstance(Numbers_Base pBase)
{
	IBase* pIBaseClass = (IBase *)pBase.m_hHandle;

	try {
		IBase* pIBase = dynamic_cast<IBase*>(pIBaseClass);
		if (!pIBase)
			throw ENumbersInterfaceException(NUMBERS_ERROR_INVALIDCAST);
		
		pIBase->ReleaseInstance();

		return NUMBERS_SUCCESS;
	}
	catch (ENumbersInterfaceException & Exception) {
		return handleNumbersException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

NumbersResult numbers_base_acquireinstance(Numbers_Base pBase)
{
	IBase* pIBaseClass = (IBase *)pBase.m_hHandle;

	try {
		IBase* pIBase = dynamic_cast<IBase*>(pIBaseClass);
		if (!pIBase)
			throw ENumbersInterfaceException(NUMBERS_ERROR_INVALIDCAST);
		
		pIBase->AcquireInstance();

		return NUMBERS_SUCCESS;
	}
	catch (ENumbersInterfaceException & Exception) {
		return handleNumbersException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

NumbersResult numbers_base_getversion(Numbers_Base pBase, Numbers_uint32 * pMajor, Numbers_uint32 * pMinor, Numbers_uint32 * pMicro)
{
	IBase* pIBaseClass = (IBase *)pBase.m_hHandle;

	try {
		if (!pMajor)
			throw ENumbersInterfaceException (NUMBERS_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ENumbersInterfaceException (NUMBERS_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ENumbersInterfaceException (NUMBERS_ERROR_INVALIDPARAM);
		IBase* pIBase = dynamic_cast<IBase*>(pIBaseClass);
		if (!pIBase)
			throw ENumbersInterfaceException(NUMBERS_ERROR_INVALIDCAST);
		
		pIBase->GetVersion(*pMajor, *pMinor, *pMicro);

		return NUMBERS_SUCCESS;
	}
	catch (ENumbersInterfaceException & Exception) {
		return handleNumbersException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

NumbersResult numbers_base_getlasterror(Numbers_Base pBase, const Numbers_uint32 nErrorMessageBufferSize, Numbers_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = (IBase *)pBase.m_hHandle;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ENumbersInterfaceException (NUMBERS_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ENumbersInterfaceException (NUMBERS_ERROR_INVALIDPARAM);
		std::string sErrorMessage("");
		IBase* pIBase = dynamic_cast<IBase*>(pIBaseClass);
		if (!pIBase)
			throw ENumbersInterfaceException(NUMBERS_ERROR_INVALIDCAST);
		
		*pHasError = pIBase->GetLastError(sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (Numbers_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ENumbersInterfaceException (NUMBERS_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return NUMBERS_SUCCESS;
	}
	catch (ENumbersInterfaceException & Exception) {
		return handleNumbersException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for VariableImpl
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Variable
**************************************************************************************************************************/
NumbersResult numbers_variableimpl_getvalue(Numbers_VariableImpl pVariableImpl, Numbers_double * pValue)
{
	IBase* pIBaseClass = (IBase *)pVariableImpl.m_hHandle;

	try {
		if (pValue == nullptr)
			throw ENumbersInterfaceException (NUMBERS_ERROR_INVALIDPARAM);
		IVariableImpl* pIVariableImpl = dynamic_cast<IVariableImpl*>(pIBaseClass);
		if (!pIVariableImpl)
			throw ENumbersInterfaceException(NUMBERS_ERROR_INVALIDCAST);
		
		*pValue = pIVariableImpl->GetValue();

		return NUMBERS_SUCCESS;
	}
	catch (ENumbersInterfaceException & Exception) {
		return handleNumbersException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

NumbersResult numbers_variableimpl_setvalue(Numbers_VariableImpl pVariableImpl, Numbers_double dValue)
{
	IBase* pIBaseClass = (IBase *)pVariableImpl.m_hHandle;

	try {
		IVariableImpl* pIVariableImpl = dynamic_cast<IVariableImpl*>(pIBaseClass);
		if (!pIVariableImpl)
			throw ENumbersInterfaceException(NUMBERS_ERROR_INVALIDCAST);
		
		pIVariableImpl->SetValue(dValue);

		return NUMBERS_SUCCESS;
	}
	catch (ENumbersInterfaceException & Exception) {
		return handleNumbersException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

NumbersResult _numbers_getprocaddress_internal(const char * pProcName, void ** ppProcAddress)
{
	static bool sbProcAddressMapHasBeenInitialized = false;
	static std::map<std::string, void*> sProcAddressMap;
	if (!sbProcAddressMapHasBeenInitialized) {
		sProcAddressMap["numbers_base_getsymbollookupmethod"] = (void*)&numbers_base_getsymbollookupmethod;
		sProcAddressMap["numbers_base_releaseinstance"] = (void*)&numbers_base_releaseinstance;
		sProcAddressMap["numbers_base_acquireinstance"] = (void*)&numbers_base_acquireinstance;
		sProcAddressMap["numbers_base_getversion"] = (void*)&numbers_base_getversion;
		sProcAddressMap["numbers_base_getlasterror"] = (void*)&numbers_base_getlasterror;
		sProcAddressMap["numbers_investigatevariable"] = (void*)&numbers_investigatevariable;
		sProcAddressMap["numbers_createvariable"] = (void*)&numbers_createvariable;
		sProcAddressMap["numbers_createvariableimpl"] = (void*)&numbers_createvariableimpl;
		sProcAddressMap["numbers_getsymbollookupmethod"] = (void*)&numbers_getsymbollookupmethod;
		sProcAddressMap["numbers_getlasterror"] = (void*)&numbers_getlasterror;
		sProcAddressMap["numbers_getversion"] = (void*)&numbers_getversion;
		
		sbProcAddressMapHasBeenInitialized = true;
	}
	if (pProcName == nullptr)
		return NUMBERS_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return NUMBERS_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	auto procPair = sProcAddressMap.find(sProcName);
	if (procPair == sProcAddressMap.end()) {
		return NUMBERS_ERROR_COULDNOTFINDLIBRARYEXPORT;
	}
	else {
		*ppProcAddress = procPair->second;
		return NUMBERS_SUCCESS;
	}
	
}

/*************************************************************************************************************************
 Function table lookup implementation for class Base
**************************************************************************************************************************/

NumbersResult _numbers_getprocaddress_base(const char * pProcName, void ** ppProcAddress)
{
	static bool sbProcAddressMapHasBeenInitialized = false;
	static std::map<std::string, void*> sProcAddressMap;
	if (!sbProcAddressMapHasBeenInitialized) {
		sProcAddressMap["numbers_base_getsymbollookupmethod"] = (void*)&numbers_base_getsymbollookupmethod;
		sProcAddressMap["numbers_base_releaseinstance"] = (void*)&numbers_base_releaseinstance;
		sProcAddressMap["numbers_base_acquireinstance"] = (void*)&numbers_base_acquireinstance;
		sProcAddressMap["numbers_base_getversion"] = (void*)&numbers_base_getversion;
		sProcAddressMap["numbers_base_getlasterror"] = (void*)&numbers_base_getlasterror;
		
		sbProcAddressMapHasBeenInitialized = true;
	}
	if (pProcName == nullptr)
		return NUMBERS_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return NUMBERS_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	auto procPair = sProcAddressMap.find(sProcName);
	if (procPair == sProcAddressMap.end()) {
		return NUMBERS_ERROR_COULDNOTFINDLIBRARYEXPORT;
	}
	else {
		*ppProcAddress = procPair->second;
		return NUMBERS_SUCCESS;
	}
	
}

/*************************************************************************************************************************
 Function table lookup implementation for class VariableImpl
**************************************************************************************************************************/

NumbersResult _numbers_getprocaddress_variableimpl(const char * pProcName, void ** ppProcAddress)
{
	static bool sbProcAddressMapHasBeenInitialized = false;
	static std::map<std::string, void*> sProcAddressMap;
	if (!sbProcAddressMapHasBeenInitialized) {
		sProcAddressMap["numbers_base_getsymbollookupmethod"] = (void*)&numbers_base_getsymbollookupmethod;
		sProcAddressMap["numbers_base_releaseinstance"] = (void*)&numbers_base_releaseinstance;
		sProcAddressMap["numbers_base_acquireinstance"] = (void*)&numbers_base_acquireinstance;
		sProcAddressMap["numbers_base_getversion"] = (void*)&numbers_base_getversion;
		sProcAddressMap["numbers_base_getlasterror"] = (void*)&numbers_base_getlasterror;
		sProcAddressMap["numbers_variable_getvalue"] = (void*)&numbers_variableimpl_getvalue;
		sProcAddressMap["numbers_variableimpl_getvalue"] = (void*)&numbers_variableimpl_getvalue;
		sProcAddressMap["numbers_variable_setvalue"] = (void*)&numbers_variableimpl_setvalue;
		sProcAddressMap["numbers_variableimpl_setvalue"] = (void*)&numbers_variableimpl_setvalue;
		
		sbProcAddressMapHasBeenInitialized = true;
	}
	if (pProcName == nullptr)
		return NUMBERS_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return NUMBERS_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	auto procPair = sProcAddressMap.find(sProcName);
	if (procPair == sProcAddressMap.end()) {
		return NUMBERS_ERROR_COULDNOTFINDLIBRARYEXPORT;
	}
	else {
		*ppProcAddress = procPair->second;
		return NUMBERS_SUCCESS;
	}
	
}



/*************************************************************************************************************************
 Initialize lookup function pointers
**************************************************************************************************************************/
NumbersSymbolLookupType IBase::s_SymbolLookupMethodBase = &_numbers_getprocaddress_base;
NumbersSymbolLookupType IVariableImpl::s_SymbolLookupMethodVariableImpl = &_numbers_getprocaddress_variableimpl;



/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
NumbersResult numbers_investigatevariable(Numbers_Variable pInstance, bool * pIsImpl)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pIsImpl == nullptr)
			throw ENumbersInterfaceException (NUMBERS_ERROR_INVALIDPARAM);
		Numbers::Binding::PVariable pIInstance = std::make_shared<Numbers::Binding::CVariable>(pInstance);
		pIInstance->AcquireInstance();
		if (!pIInstance)
			throw ENumbersInterfaceException (NUMBERS_ERROR_INVALIDCAST);
		
		*pIsImpl = CWrapper::InvestigateVariable(pIInstance);

		return NUMBERS_SUCCESS;
	}
	catch (ENumbersInterfaceException & Exception) {
		return handleNumbersException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

NumbersResult numbers_createvariable(Numbers_double dInitialValue, Numbers_Variable * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pInstance == nullptr)
			throw ENumbersInterfaceException (NUMBERS_ERROR_INVALIDPARAM);
		Numbers::Binding::PVariable pNumbersInstance;
		pNumbersInstance = CWrapper::CreateVariable(dInitialValue);

		// TODO: this does not work necessarily@ pBaseInstance might be nullptr
		pNumbersInstance->AcquireInstance();
		*pInstance = pNumbersInstance->GetHandle();
		return NUMBERS_SUCCESS;
	}
	catch (ENumbersInterfaceException & Exception) {
		return handleNumbersException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

NumbersResult numbers_createvariableimpl(Numbers_double dInitialValue, Numbers_VariableImpl * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pInstance == nullptr)
			throw ENumbersInterfaceException (NUMBERS_ERROR_INVALIDPARAM);
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateVariableImpl(dInitialValue);

		// TODO: this does not work necessarily@ pBaseInstance might be nullptr
		*pInstance = pBaseInstance->GetExtendedHandle();
		return NUMBERS_SUCCESS;
	}
	catch (ENumbersInterfaceException & Exception) {
		return handleNumbersException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

NumbersResult numbers_getsymbollookupmethod(Numbers_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ENumbersInterfaceException (NUMBERS_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = &_numbers_getprocaddress_internal;
		return NUMBERS_SUCCESS;
	}
	catch (ENumbersInterfaceException & Exception) {
		return handleNumbersException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

NumbersResult numbers_getlasterror(const Numbers_uint32 nErrorMessageBufferSize, Numbers_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ENumbersInterfaceException (NUMBERS_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ENumbersInterfaceException (NUMBERS_ERROR_INVALIDPARAM);
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (Numbers_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ENumbersInterfaceException (NUMBERS_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return NUMBERS_SUCCESS;
	}
	catch (ENumbersInterfaceException & Exception) {
		return handleNumbersException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

NumbersResult numbers_getversion(Numbers_uint32 * pMajor, Numbers_uint32 * pMinor, Numbers_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ENumbersInterfaceException (NUMBERS_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ENumbersInterfaceException (NUMBERS_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ENumbersInterfaceException (NUMBERS_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return NUMBERS_SUCCESS;
	}
	catch (ENumbersInterfaceException & Exception) {
		return handleNumbersException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


