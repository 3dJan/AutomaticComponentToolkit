/*++

Copyright (C) 2019 Calculation developers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ application that demonstrates the
 usage of the Dynamic C++ bindings of Calculation library

Interface version: 1.0.0

*/

#include <iostream>
#include "calculation_dynamic.hpp"


int main()
{
	try
	{
		std::string libpath = ("D:/PUBLIC/AutomaticComponentToolkit_work/Examples/CrossComponentInheritance/Calculation_component/Implementations/Cpp/build/Debug"); // TODO: put the location of the Calculation-library file here.
		auto wrapper = Calculation::Binding::CWrapper::loadLibrary(libpath + "/calculation.dll"); // TODO: add correct suffix of the library
		
		Calculation_uint32 nMajor, nMinor, nMicro;
		wrapper->GetVersion(nMajor, nMinor, nMicro);
		std::cout << "Calculation.Version = " << nMajor << "." << nMinor << "." << nMicro;
		std::cout << std::endl;

		libpath = ("D:/PUBLIC/AutomaticComponentToolkit_work/Examples/CrossComponentInheritance/Numbers_component/Implementations/Cpp/build/Debug"); // TODO: put the location of the Calculation-library file here.
		auto numbersWrapper = Numbers::Binding::CWrapper::loadLibrary(libpath + "/numbers.dll"); // TODO: add correct suffix of the library

		auto pCalculator = wrapper->CreateCalculator();
		{
			auto pVar = numbersWrapper->CreateVariable(1.0);
			std::cout << "Value = " << pVar->GetValue() << std::endl;
			pVar->SetValue(10.0);
			std::cout << "Value = " << pVar->GetValue() << std::endl;

			wrapper->InjectComponent("Numbers", numbersWrapper->GetSymbolLookupMethod());
			{
				auto pVariable = pCalculator->Multiply();
				std::cout << "Product = " << pVariable->GetValue() << std::endl;
			}
			{
				pCalculator->EnlistVariable(pVar.get());
				auto pVariable = pCalculator->Multiply();
				std::cout << "Product = " << pVariable->GetValue() << std::endl;
			}
		}
		auto pEnlistedVariable = pCalculator->GetEnlistedVariable(0);
		pEnlistedVariable->SetValue(20);
		auto pVariable = pCalculator->Multiply();
		std::cout << "Product = " << pVariable->GetValue() << std::endl;
	}
	catch (std::exception &e)
	{
		std::cout << e.what() << std::endl;
		return 1;
	}
	return 0;
}

