/*++

Copyright (C) 2019 Special Numbers developers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of Special Numbers library. The implementer of Special Numbers library needs to
derive concrete classes from the abstract classes in this header.

Interface version: 1.0.0

*/


#ifndef __SPECIAL_CPPINTERFACES
#define __SPECIAL_CPPINTERFACES

#include <string>
#include <memory>

#include "special_types.hpp"


#include "numbers_dynamic.hpp"

namespace Special {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class ISpecialVariable;



/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
public:
	static SpecialSymbolLookupType s_SymbolLookupMethodBase;
protected:
	SpecialExtendedHandle m_ExtendedHandle;
public:
	SpecialExtendedHandle GetExtendedHandle() {
		return m_ExtendedHandle;
	}
	
	IBase() {
		m_ExtendedHandle.m_hHandle = this;
		m_ExtendedHandle.m_pfnSymbolLookupMethod = s_SymbolLookupMethodBase;
	}
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->ReleaseInstance();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->AcquireInstance();
		}
	};


	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;
	/**
	* IBase::GetLastError - Returns the last error recorded on this object
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	virtual bool GetLastError(std::string & sErrorMessage) = 0;

	/**
	* IBase::ReleaseInstance - Releases shared ownership of an Instance
	*/
	virtual void ReleaseInstance() = 0;

	/**
	* IBase::AcquireInstance - Acquires shared ownership of an Instance
	*/
	virtual void AcquireInstance() = 0;

};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->AcquireInstance();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->AcquireInstance();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for SpecialVariable 
**************************************************************************************************************************/

// TODO: we are missing all methods of "intermediate classes" in the class hierarchy
class ISpecialVariable : public virtual IBase {
public:
	static SpecialSymbolLookupType s_SymbolLookupMethodSpecialVariable;
	ISpecialVariable() {
		m_ExtendedHandle.m_pfnSymbolLookupMethod = s_SymbolLookupMethodSpecialVariable;
	}
	
	/**
	* ISpecialVariable::GetSpecialValue - Returns the current value of this Variable as integer. i.e. it rounds
	* @return The current value of this Variable
	*/
	virtual Special_int64 GetSpecialValue() = 0;

};

typedef IBaseSharedPtr<ISpecialVariable> PISpecialVariable;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	// Injected Components
	static Numbers::PWrapper sPNumbersWrapper;

	/**
	* Ispecial::CreateSpecialVariable - Creates a new Variable instance
	* @param[in] dInitialValue - Initial value of the new SpecialVariable
	* @return New SpecialVariable instance
	*/
	static ISpecialVariable * CreateSpecialVariable(const Special_double dInitialValue);

	/**
	* Ispecial::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(Special_uint32 & nMajor, Special_uint32 & nMinor, Special_uint32 & nMicro);

	/**
	* Ispecial::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Ispecial::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Ispecial::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

};

} // namespace Impl
} // namespace Special

#endif // __SPECIAL_CPPINTERFACES
