/*++

Copyright (C) 2019 Special Numbers developers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of Special Numbers library. It needs to be generated only once.

Interface version: 1.0.0

*/

#include "special_abi.hpp"
#include "special_interfaces.hpp"
#include "special_interfaceexception.hpp"

#include "special_specialvariable.hpp"

using namespace Special;
using namespace Special::Impl;

// Injected Components
Numbers::Binding::PWrapper CWrapper::sPNumbersWrapper;

Numbers::Binding::PVariable CWrapper::CreateSpecialVariableAsVariable(const Special_double dInitialValue)
{
	PISpecialVariable pImpl(new CSpecialVariable());
	pImpl->SetValue(dInitialValue);
	NumbersExtendedHandle h;
	h.m_hHandle = pImpl->GetExtendedHandle().m_hHandle;
	h.m_pfnSymbolLookupMethod = pImpl->GetExtendedHandle().m_pfnSymbolLookupMethod;
	return std::make_shared<Numbers::Binding::CVariable>(h);
}

ISpecialVariable * CWrapper::CreateSpecialVariable(const Special_double dInitialValue)
{
	PISpecialVariable pImpl(new CSpecialVariable());
	pImpl->SetValue(dInitialValue);
	return pImpl.getCoOwningPtr();
}

bool CWrapper::GetLastError(std::string & sErrorMessage)
{
	throw ESpecialInterfaceException(SPECIAL_ERROR_NOTIMPLEMENTED);
}

void CWrapper::GetVersion(Special_uint32 & nMajor, Special_uint32 & nMinor, Special_uint32 & nMicro)
{
	nMajor = SPECIAL_VERSION_MAJOR;
	nMinor = SPECIAL_VERSION_MINOR;
	nMicro = SPECIAL_VERSION_MICRO;
}


