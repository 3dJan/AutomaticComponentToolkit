/*++

Copyright (C) 2019 Special Numbers developers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of Special Numbers library. It needs to be generated only once.

Interface version: 1.0.0

*/

#include "special_abi.hpp"
#include "special_interfaces.hpp"
#include "special_interfaceexception.hpp"

using namespace Special;
using namespace Special::Impl;

#include "special_specialvariable.hpp"


// Injected Components
Numbers::PWrapper CWrapper::sPNumbersWrapper;


// Initialize lookup function pointers 
// TODO
SpecialSymbolLookupType IBase::s_SymbolLookupMethodBase = nullptr;
SpecialSymbolLookupType ISpecialVariable::s_SymbolLookupMethodSpecialVariable = nullptr;

ISpecialVariable * CWrapper::CreateSpecialVariable(const Special_double dInitialValue)
{
	special_getsymbollookupmethod((void**)&(IBase::s_SymbolLookupMethodBase));
	special_getsymbollookupmethod((void**)&(ISpecialVariable::s_SymbolLookupMethodSpecialVariable));

	return new CSpecialVariable();
}

void CWrapper::GetVersion(Special_uint32 & nMajor, Special_uint32 & nMinor, Special_uint32 & nMicro)
{
	nMajor = SPECIAL_VERSION_MAJOR;
	nMinor = SPECIAL_VERSION_MINOR;
	nMicro = SPECIAL_VERSION_MICRO;
}

bool CWrapper::GetLastError(IBase* pInstance, std::string & sErrorMessage)
{
	return pInstance->GetLastError(sErrorMessage);
}

void CWrapper::ReleaseInstance(IBase* pInstance)
{
	IBase::ReleaseBaseClassInterface(pInstance);
}

void CWrapper::AcquireInstance(IBase* pInstance)
{
	IBase::AcquireBaseClassInterface(pInstance);
}


