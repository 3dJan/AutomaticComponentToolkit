(*++

Copyright (C) 2021 ADSK

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated Pascal exception class definition file in order to allow easy
development of RTTI. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 1.0.0

*)

{$MODE DELPHI}
unit rtti_exception;

interface

uses
	rtti_types,
	rtti_interfaces,
	Classes,
	sysutils;

type
	ERTTIException = class(Exception)
	private
		FErrorCode: TRTTIResult;
		FCustomMessage: String;
	public
		property ErrorCode: TRTTIResult read FErrorCode;
		property CustomMessage: String read FCustomMessage;
		constructor Create(AErrorCode: TRTTIResult);
		constructor CreateCustomMessage(AErrorCode: TRTTIResult; AMessage: String);
	end;


(*************************************************************************************************************************
 Definition of exception handling functionality for RTTI
**************************************************************************************************************************)

function HandleRTTIException(ARTTIObject: TObject; E: ERTTIException): TRTTIResult;
function HandleStdException(ARTTIObject: TObject; E: Exception): TRTTIResult;
function HandleUnhandledException(ARTTIObject: TObject): TRTTIResult;


implementation

	constructor ERTTIException.Create(AErrorCode: TRTTIResult);
	var
		ADescription: String;
	begin
		FErrorCode := AErrorCode;
		case FErrorCode of
			RTTI_ERROR_NOTIMPLEMENTED: ADescription := 'functionality not implemented';
			RTTI_ERROR_INVALIDPARAM: ADescription := 'an invalid parameter was passed';
			RTTI_ERROR_INVALIDCAST: ADescription := 'a type cast failed';
			RTTI_ERROR_BUFFERTOOSMALL: ADescription := 'a provided buffer is too small';
			RTTI_ERROR_GENERICEXCEPTION: ADescription := 'a generic exception occurred';
			RTTI_ERROR_COULDNOTLOADLIBRARY: ADescription := 'the library could not be loaded';
			RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT: ADescription := 'a required exported symbol could not be found in the library';
			RTTI_ERROR_INCOMPATIBLEBINARYVERSION: ADescription := 'the version of the binary interface does not match the bindings interface';
			else
				ADescription := 'unknown';
		end;

		inherited Create(Format('RTTI Error - %s (#%d)', [ ADescription, AErrorCode ]));
	end;

	constructor ERTTIException.CreateCustomMessage(AErrorCode: TRTTIResult; AMessage: String);
	begin
		FCustomMessage := AMessage;
		FErrorCode := AErrorCode;
		inherited Create(Format('%s(%d)', [FCustomMessage, AErrorCode]));
	end;

(*************************************************************************************************************************
 Implementation of exception handling functionality for RTTI
**************************************************************************************************************************)

function HandleRTTIException(ARTTIObject: TObject; E: ERTTIException): TRTTIResult;
begin
	result := E.ErrorCode;
	if Supports(ARTTIObject, IRTTIBase) then begin
		(ARTTIObject as IRTTIBase).RegisterErrorMessage(E.CustomMessage)
	end;
end;
function HandleStdException(ARTTIObject: TObject; E: Exception): TRTTIResult;
begin
	Result := RTTI_ERROR_GENERICEXCEPTION;
	if Supports(ARTTIObject, IRTTIBase) then begin
		(ARTTIObject as IRTTIBase).RegisterErrorMessage(E.Message)
	end;
end;
function HandleUnhandledException(ARTTIObject: TObject): TRTTIResult;
begin
	Result := RTTI_ERROR_GENERICEXCEPTION;
	if Supports(ARTTIObject, IRTTIBase) then begin
		(ARTTIObject as IRTTIBase).RegisterErrorMessage('Unhandled Exception')
	end;
end;
end.
