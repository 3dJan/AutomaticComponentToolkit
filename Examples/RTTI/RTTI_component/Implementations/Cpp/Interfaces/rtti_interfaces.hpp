/*++

Copyright (C) 2021 ADSK

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of RTTI. The implementer of RTTI needs to
derive concrete classes from the abstract classes in this header.

Interface version: 1.0.0

*/


#ifndef __RTTI_CPPINTERFACES
#define __RTTI_CPPINTERFACES

#include <string>
#include <memory>

#include "rtti_types.hpp"



namespace RTTI {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class IAnimal;
class IMammal;
class IReptile;
class IGiraffe;
class ITiger;
class ISnake;
class ITurtle;
class IAnimalIterator;
class IZoo;



/*************************************************************************************************************************
 Parameter Cache definitions
**************************************************************************************************************************/

class ParameterCache {
	public:
		virtual ~ParameterCache() {}
};

template <class T1> class ParameterCache_1 : public ParameterCache {
	private:
		T1 m_param1;
	public:
		ParameterCache_1 (const T1 & param1)
			: m_param1 (param1)
		{
		}

		void retrieveData (T1 & param1)
		{
			param1 = m_param1;
		}
};

template <class T1, class T2> class ParameterCache_2 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
	public:
		ParameterCache_2 (const T1 & param1, const T2 & param2)
			: m_param1 (param1), m_param2 (param2)
		{
		}

		void retrieveData (T1 & param1, T2 & param2)
		{
			param1 = m_param1;
			param2 = m_param2;
		}
};

template <class T1, class T2, class T3> class ParameterCache_3 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
	public:
		ParameterCache_3 (const T1 & param1, const T2 & param2, const T3 & param3)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
		}
};


/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
private:
	std::unique_ptr<ParameterCache> m_ParameterCache;
public:
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBase::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBase::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;

	/**
	* IBase::_setCache - set parameter cache of object
	*/
	void _setCache(ParameterCache * pCache)
	{
		m_ParameterCache.reset(pCache);
	}

	/**
	* IBase::_getCache - returns parameter cache of object
	*/
	ParameterCache* _getCache()
	{
		return m_ParameterCache.get();
	}

	/**
	* IBase::ClassTypeId - Get Class Type Id
	* @return Class type as a 64 bits integer
	*/
	virtual RTTI_uint64 ClassTypeId() = 0;
};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for Animal 
**************************************************************************************************************************/

class IAnimal : public virtual IBase {
public:
	/**
	* IAnimal::ClassTypeId - Get Class Type Id
	* @return Class type as a 64 bits integer
	*/
	RTTI_uint64 ClassTypeId() override
	{
		return 0x8B40467DA6D327AFUL; // First 64 bits of SHA1 of a string: "RTTI::Animal"
	}

	/**
	* IAnimal::Name - Get the name of the animal
	* @return 
	*/
	virtual std::string Name() = 0;

};

typedef IBaseSharedPtr<IAnimal> PIAnimal;


/*************************************************************************************************************************
 Class interface for Mammal 
**************************************************************************************************************************/

class IMammal : public virtual IAnimal {
public:
	/**
	* IMammal::ClassTypeId - Get Class Type Id
	* @return Class type as a 64 bits integer
	*/
	RTTI_uint64 ClassTypeId() override
	{
		return 0xBC9D5FA7750C1020UL; // First 64 bits of SHA1 of a string: "RTTI::Mammal"
	}

};

typedef IBaseSharedPtr<IMammal> PIMammal;


/*************************************************************************************************************************
 Class interface for Reptile 
**************************************************************************************************************************/

class IReptile : public virtual IAnimal {
public:
	/**
	* IReptile::ClassTypeId - Get Class Type Id
	* @return Class type as a 64 bits integer
	*/
	RTTI_uint64 ClassTypeId() override
	{
		return 0x6756AA8EA5802EC3UL; // First 64 bits of SHA1 of a string: "RTTI::Reptile"
	}

};

typedef IBaseSharedPtr<IReptile> PIReptile;


/*************************************************************************************************************************
 Class interface for Giraffe 
**************************************************************************************************************************/

class IGiraffe : public virtual IMammal {
public:
	/**
	* IGiraffe::ClassTypeId - Get Class Type Id
	* @return Class type as a 64 bits integer
	*/
	RTTI_uint64 ClassTypeId() override
	{
		return 0x9751971BD2C2D958UL; // First 64 bits of SHA1 of a string: "RTTI::Giraffe"
	}

};

typedef IBaseSharedPtr<IGiraffe> PIGiraffe;


/*************************************************************************************************************************
 Class interface for Tiger 
**************************************************************************************************************************/

class ITiger : public virtual IMammal {
public:
	/**
	* ITiger::ClassTypeId - Get Class Type Id
	* @return Class type as a 64 bits integer
	*/
	RTTI_uint64 ClassTypeId() override
	{
		return 0x8D007E7B5F7BAF4UL; // First 64 bits of SHA1 of a string: "RTTI::Tiger"
	}

	/**
	* ITiger::Roar - Roar like a tiger
	*/
	virtual void Roar() = 0;

};

typedef IBaseSharedPtr<ITiger> PITiger;


/*************************************************************************************************************************
 Class interface for Snake 
**************************************************************************************************************************/

class ISnake : public virtual IReptile {
public:
	/**
	* ISnake::ClassTypeId - Get Class Type Id
	* @return Class type as a 64 bits integer
	*/
	RTTI_uint64 ClassTypeId() override
	{
		return 0x5F6826EF909803B2UL; // First 64 bits of SHA1 of a string: "RTTI::Snake"
	}

};

typedef IBaseSharedPtr<ISnake> PISnake;


/*************************************************************************************************************************
 Class interface for Turtle 
**************************************************************************************************************************/

class ITurtle : public virtual IReptile {
public:
	/**
	* ITurtle::ClassTypeId - Get Class Type Id
	* @return Class type as a 64 bits integer
	*/
	RTTI_uint64 ClassTypeId() override
	{
		return 0x8E551B208A2E8321UL; // First 64 bits of SHA1 of a string: "RTTI::Turtle"
	}

};

typedef IBaseSharedPtr<ITurtle> PITurtle;


/*************************************************************************************************************************
 Class interface for AnimalIterator 
**************************************************************************************************************************/

class IAnimalIterator : public virtual IBase {
public:
	/**
	* IAnimalIterator::ClassTypeId - Get Class Type Id
	* @return Class type as a 64 bits integer
	*/
	RTTI_uint64 ClassTypeId() override
	{
		return 0xF1917FE6BBE77831UL; // First 64 bits of SHA1 of a string: "RTTI::AnimalIterator"
	}

	/**
	* IAnimalIterator::GetNextAnimal - Return next animal
	* @return 
	*/
	virtual IAnimal * GetNextAnimal() = 0;

};

typedef IBaseSharedPtr<IAnimalIterator> PIAnimalIterator;


/*************************************************************************************************************************
 Class interface for Zoo 
**************************************************************************************************************************/

class IZoo : public virtual IBase {
public:
	/**
	* IZoo::ClassTypeId - Get Class Type Id
	* @return Class type as a 64 bits integer
	*/
	RTTI_uint64 ClassTypeId() override
	{
		return 0x2262ABE80A5E7878UL; // First 64 bits of SHA1 of a string: "RTTI::Zoo"
	}

	/**
	* IZoo::Iterator - Return an iterator over all zoo animals
	* @return 
	*/
	virtual IAnimalIterator * Iterator() = 0;

};

typedef IBaseSharedPtr<IZoo> PIZoo;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	/**
	* Irtti::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(RTTI_uint32 & nMajor, RTTI_uint32 & nMinor, RTTI_uint32 & nMicro);

	/**
	* Irtti::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Irtti::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Irtti::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

	/**
	* Irtti::CreateZoo - Create a new zoo with animals
	* @return 
	*/
	static IZoo * CreateZoo();

};

RTTIResult RTTI_GetProcAddress (const char * pProcName, void ** ppProcAddress);

} // namespace Impl
} // namespace RTTI

#endif // __RTTI_CPPINTERFACES
