/*++

Copyright (C) 2021 ADSK

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of RTTI. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 1.0.0

*/

#include "rtti_abi.hpp"
#include "rtti_interfaces.hpp"
#include "rtti_interfaceexception.hpp"

#include <map>

using namespace RTTI::Impl;

RTTIResult handleRTTIException(IBase * pIBaseClass, ERTTIInterfaceException & Exception)
{
	RTTIResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

RTTIResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	RTTIResult errorCode = RTTI_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

RTTIResult handleUnhandledException(IBase * pIBaseClass)
{
	RTTIResult errorCode = RTTI_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/
RTTIResult rtti_base_classtypeid(RTTI_Base pBase, RTTI_uint64 * pClassTypeId)
{
	IBase* pIBaseClass = (IBase *)pBase;

	try {
		if (pClassTypeId == nullptr)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		IBase* pIBase = dynamic_cast<IBase*>(pIBaseClass);
		if (!pIBase)
			throw ERTTIInterfaceException(RTTI_ERROR_INVALIDCAST);
		
		*pClassTypeId = pIBase->ClassTypeId();

		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Animal
**************************************************************************************************************************/
RTTIResult rtti_animal_name(RTTI_Animal pAnimal, const RTTI_uint32 nResultBufferSize, RTTI_uint32* pResultNeededChars, char * pResultBuffer)
{
	IBase* pIBaseClass = (IBase *)pAnimal;

	try {
		if ( (!pResultBuffer) && !(pResultNeededChars) )
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		std::string sResult("");
		IAnimal* pIAnimal = dynamic_cast<IAnimal*>(pIBaseClass);
		if (!pIAnimal)
			throw ERTTIInterfaceException(RTTI_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pResultBuffer == nullptr);
		if (isCacheCall) {
			sResult = pIAnimal->Name();

			pIAnimal->_setCache (new ParameterCache_1<std::string> (sResult));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIAnimal->_getCache ());
			if (cache == nullptr)
				throw ERTTIInterfaceException(RTTI_ERROR_INVALIDCAST);
			cache->retrieveData (sResult);
			pIAnimal->_setCache (nullptr);
		}
		
		if (pResultNeededChars)
			*pResultNeededChars = (RTTI_uint32) (sResult.size()+1);
		if (pResultBuffer) {
			if (sResult.size() >= nResultBufferSize)
				throw ERTTIInterfaceException (RTTI_ERROR_BUFFERTOOSMALL);
			for (size_t iResult = 0; iResult < sResult.size(); iResult++)
				pResultBuffer[iResult] = sResult[iResult];
			pResultBuffer[sResult.size()] = 0;
		}
		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Mammal
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Reptile
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Giraffe
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Tiger
**************************************************************************************************************************/
RTTIResult rtti_tiger_roar(RTTI_Tiger pTiger)
{
	IBase* pIBaseClass = (IBase *)pTiger;

	try {
		ITiger* pITiger = dynamic_cast<ITiger*>(pIBaseClass);
		if (!pITiger)
			throw ERTTIInterfaceException(RTTI_ERROR_INVALIDCAST);
		
		pITiger->Roar();

		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Snake
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Turtle
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for AnimalIterator
**************************************************************************************************************************/
RTTIResult rtti_animaliterator_getnextanimal(RTTI_AnimalIterator pAnimalIterator, RTTI_Animal * pAnimal)
{
	IBase* pIBaseClass = (IBase *)pAnimalIterator;

	try {
		if (pAnimal == nullptr)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		IBase* pBaseAnimal(nullptr);
		IAnimalIterator* pIAnimalIterator = dynamic_cast<IAnimalIterator*>(pIBaseClass);
		if (!pIAnimalIterator)
			throw ERTTIInterfaceException(RTTI_ERROR_INVALIDCAST);
		
		pBaseAnimal = pIAnimalIterator->GetNextAnimal();

		*pAnimal = (IBase*)(pBaseAnimal);
		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

RTTIResult rtti_animaliterator_getnextoptinalanimal(RTTI_AnimalIterator pAnimalIterator, RTTI_Animal * pAnimal, bool * pError)
{
	IBase* pIBaseClass = (IBase *)pAnimalIterator;

	try {
		if (pAnimal == nullptr)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		if (pError == nullptr)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		IAnimal* pBaseAnimal(nullptr);
		IAnimalIterator* pIAnimalIterator = dynamic_cast<IAnimalIterator*>(pIBaseClass);
		if (!pIAnimalIterator)
			throw ERTTIInterfaceException(RTTI_ERROR_INVALIDCAST);
		
		*pError = pIAnimalIterator->GetNextOptinalAnimal(pBaseAnimal);

		*pAnimal = (IBase*)(pBaseAnimal);
		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

RTTIResult rtti_animaliterator_getnextmandatoryanimal(RTTI_AnimalIterator pAnimalIterator, RTTI_Animal * pAnimal, bool * pError)
{
	IBase* pIBaseClass = (IBase *)pAnimalIterator;

	try {
		if (pAnimal == nullptr)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		if (pError == nullptr)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		IAnimal* pBaseAnimal(nullptr);
		IAnimalIterator* pIAnimalIterator = dynamic_cast<IAnimalIterator*>(pIBaseClass);
		if (!pIAnimalIterator)
			throw ERTTIInterfaceException(RTTI_ERROR_INVALIDCAST);
		
		*pError = pIAnimalIterator->GetNextMandatoryAnimal(pBaseAnimal);

		*pAnimal = (IBase*)(pBaseAnimal);
		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Zoo
**************************************************************************************************************************/
RTTIResult rtti_zoo_iterator(RTTI_Zoo pZoo, RTTI_AnimalIterator * pIterator)
{
	IBase* pIBaseClass = (IBase *)pZoo;

	try {
		if (pIterator == nullptr)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		IBase* pBaseIterator(nullptr);
		IZoo* pIZoo = dynamic_cast<IZoo*>(pIBaseClass);
		if (!pIZoo)
			throw ERTTIInterfaceException(RTTI_ERROR_INVALIDCAST);
		
		pBaseIterator = pIZoo->Iterator();

		*pIterator = (IBase*)(pBaseIterator);
		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

RTTIResult RTTI::Impl::RTTI_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return RTTI_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return RTTI_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "rtti_base_classtypeid") 
		*ppProcAddress = (void*) &rtti_base_classtypeid;
	if (sProcName == "rtti_animal_name") 
		*ppProcAddress = (void*) &rtti_animal_name;
	if (sProcName == "rtti_tiger_roar") 
		*ppProcAddress = (void*) &rtti_tiger_roar;
	if (sProcName == "rtti_animaliterator_getnextanimal") 
		*ppProcAddress = (void*) &rtti_animaliterator_getnextanimal;
	if (sProcName == "rtti_animaliterator_getnextoptinalanimal") 
		*ppProcAddress = (void*) &rtti_animaliterator_getnextoptinalanimal;
	if (sProcName == "rtti_animaliterator_getnextmandatoryanimal") 
		*ppProcAddress = (void*) &rtti_animaliterator_getnextmandatoryanimal;
	if (sProcName == "rtti_zoo_iterator") 
		*ppProcAddress = (void*) &rtti_zoo_iterator;
	if (sProcName == "rtti_getversion") 
		*ppProcAddress = (void*) &rtti_getversion;
	if (sProcName == "rtti_getlasterror") 
		*ppProcAddress = (void*) &rtti_getlasterror;
	if (sProcName == "rtti_releaseinstance") 
		*ppProcAddress = (void*) &rtti_releaseinstance;
	if (sProcName == "rtti_acquireinstance") 
		*ppProcAddress = (void*) &rtti_acquireinstance;
	if (sProcName == "rtti_injectcomponent") 
		*ppProcAddress = (void*) &rtti_injectcomponent;
	if (sProcName == "rtti_getsymbollookupmethod") 
		*ppProcAddress = (void*) &rtti_getsymbollookupmethod;
	if (sProcName == "rtti_createzoo") 
		*ppProcAddress = (void*) &rtti_createzoo;
	
	if (*ppProcAddress == nullptr) 
		return RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return RTTI_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
RTTIResult rtti_getversion(RTTI_uint32 * pMajor, RTTI_uint32 * pMinor, RTTI_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

RTTIResult rtti_getlasterror(RTTI_Base pInstance, const RTTI_uint32 nErrorMessageBufferSize, RTTI_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (RTTI_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ERTTIInterfaceException (RTTI_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

RTTIResult rtti_releaseinstance(RTTI_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

RTTIResult rtti_acquireinstance(RTTI_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

RTTIResult rtti_injectcomponent(const char * pNameSpace, RTTI_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		
		if (!bNameSpaceFound)
			throw ERTTIInterfaceException(RTTI_ERROR_COULDNOTLOADLIBRARY);
		
		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

RTTIResult rtti_getsymbollookupmethod(RTTI_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&RTTI::Impl::RTTI_GetProcAddress;
		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

RTTIResult rtti_createzoo(RTTI_Zoo * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pInstance == nullptr)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateZoo();

		*pInstance = (IBase*)(pBaseInstance);
		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


