/*++

Copyright (C) 2020 ADSK

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of RTTI. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 1.0.0

*/

#include "rtti_abi.hpp"
#include "rtti_interfaces.hpp"
#include "rtti_interfaceexception.hpp"

#include <map>

using namespace RTTI::Impl;

RTTIResult handleRTTIException(IBase * pIBaseClass, ERTTIInterfaceException & Exception)
{
	RTTIResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

RTTIResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	RTTIResult errorCode = RTTI_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

RTTIResult handleUnhandledException(IBase * pIBaseClass)
{
	RTTIResult errorCode = RTTI_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Animal
**************************************************************************************************************************/
RTTIResult rtti_animal_name(RTTI_Animal pAnimal, const RTTI_uint32 nResultBufferSize, RTTI_uint32* pResultNeededChars, char * pResultBuffer)
{
	IBase* pIBaseClass = (IBase *)pAnimal;

	try {
		if ( (!pResultBuffer) && !(pResultNeededChars) )
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		std::string sResult("");
		IAnimal* pIAnimal = dynamic_cast<IAnimal*>(pIBaseClass);
		if (!pIAnimal)
			throw ERTTIInterfaceException(RTTI_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pResultBuffer == nullptr);
		if (isCacheCall) {
			sResult = pIAnimal->Name();

			pIAnimal->_setCache (new ParameterCache_1<std::string> (sResult));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIAnimal->_getCache ());
			if (cache == nullptr)
				throw ERTTIInterfaceException(RTTI_ERROR_INVALIDCAST);
			cache->retrieveData (sResult);
			pIAnimal->_setCache (nullptr);
		}
		
		if (pResultNeededChars)
			*pResultNeededChars = (RTTI_uint32) (sResult.size()+1);
		if (pResultBuffer) {
			if (sResult.size() >= nResultBufferSize)
				throw ERTTIInterfaceException (RTTI_ERROR_BUFFERTOOSMALL);
			for (size_t iResult = 0; iResult < sResult.size(); iResult++)
				pResultBuffer[iResult] = sResult[iResult];
			pResultBuffer[sResult.size()] = 0;
		}
		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Mammal
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Reptile
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Giraffe
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Tiger
**************************************************************************************************************************/
RTTIResult rtti_tiger_roar(RTTI_Tiger pTiger)
{
	IBase* pIBaseClass = (IBase *)pTiger;

	try {
		ITiger* pITiger = dynamic_cast<ITiger*>(pIBaseClass);
		if (!pITiger)
			throw ERTTIInterfaceException(RTTI_ERROR_INVALIDCAST);
		
		pITiger->Roar();

		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Snake
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Turtle
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for AnimalIterator
**************************************************************************************************************************/
RTTIResult rtti_animaliterator_getnextanimal(RTTI_AnimalIterator pAnimalIterator, RTTI_Animal * pAnimal)
{
	IBase* pIBaseClass = (IBase *)pAnimalIterator;

	try {
		if (pAnimal == nullptr)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		IBase* pBaseAnimal(nullptr);
		IAnimalIterator* pIAnimalIterator = dynamic_cast<IAnimalIterator*>(pIBaseClass);
		if (!pIAnimalIterator)
			throw ERTTIInterfaceException(RTTI_ERROR_INVALIDCAST);
		
		pBaseAnimal = pIAnimalIterator->GetNextAnimal();

		*pAnimal = (IBase*)(pBaseAnimal);
		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Zoo
**************************************************************************************************************************/
RTTIResult rtti_zoo_iterator(RTTI_Zoo pZoo, RTTI_AnimalIterator * pIterator)
{
	IBase* pIBaseClass = (IBase *)pZoo;

	try {
		if (pIterator == nullptr)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		IBase* pBaseIterator(nullptr);
		IZoo* pIZoo = dynamic_cast<IZoo*>(pIBaseClass);
		if (!pIZoo)
			throw ERTTIInterfaceException(RTTI_ERROR_INVALIDCAST);
		
		pBaseIterator = pIZoo->Iterator();

		*pIterator = (IBase*)(pBaseIterator);
		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

RTTIResult RTTI::Impl::RTTI_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return RTTI_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return RTTI_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "rtti_animal_name") 
		*ppProcAddress = (void*) &rtti_animal_name;
	if (sProcName == "rtti_tiger_roar") 
		*ppProcAddress = (void*) &rtti_tiger_roar;
	if (sProcName == "rtti_animaliterator_getnextanimal") 
		*ppProcAddress = (void*) &rtti_animaliterator_getnextanimal;
	if (sProcName == "rtti_zoo_iterator") 
		*ppProcAddress = (void*) &rtti_zoo_iterator;
	if (sProcName == "rtti_getversion") 
		*ppProcAddress = (void*) &rtti_getversion;
	if (sProcName == "rtti_getlasterror") 
		*ppProcAddress = (void*) &rtti_getlasterror;
	if (sProcName == "rtti_releaseinstance") 
		*ppProcAddress = (void*) &rtti_releaseinstance;
	if (sProcName == "rtti_acquireinstance") 
		*ppProcAddress = (void*) &rtti_acquireinstance;
	if (sProcName == "rtti_injectcomponent") 
		*ppProcAddress = (void*) &rtti_injectcomponent;
	if (sProcName == "rtti_getsymbollookupmethod") 
		*ppProcAddress = (void*) &rtti_getsymbollookupmethod;
	if (sProcName == "rtti_implementsinterface") 
		*ppProcAddress = (void*) &rtti_implementsinterface;
	if (sProcName == "rtti_createzoo") 
		*ppProcAddress = (void*) &rtti_createzoo;
	
	if (*ppProcAddress == nullptr) 
		return RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return RTTI_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
RTTIResult rtti_getversion(RTTI_uint32 * pMajor, RTTI_uint32 * pMinor, RTTI_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

RTTIResult rtti_getlasterror(RTTI_Base pInstance, const RTTI_uint32 nErrorMessageBufferSize, RTTI_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (RTTI_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ERTTIInterfaceException (RTTI_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

RTTIResult rtti_releaseinstance(RTTI_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

RTTIResult rtti_acquireinstance(RTTI_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

RTTIResult rtti_injectcomponent(const char * pNameSpace, RTTI_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		
		if (!bNameSpaceFound)
			throw ERTTIInterfaceException(RTTI_ERROR_COULDNOTLOADLIBRARY);
		
		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

RTTIResult rtti_getsymbollookupmethod(RTTI_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&RTTI::Impl::RTTI_GetProcAddress;
		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
	Test whether an object implements a given interface
**************************************************************************************************************************/

RTTIResult rtti_implementsinterface(RTTI_Base pObject, RTTI_uint64 nClassHashBufferSize, const RTTI_uint8 * pClassHashBuffer, bool * pImplementsInterface)
{
	if (nClassHashBufferSize != 16) // Hash length must be as expected
		return RTTI_ERROR_INVALIDPARAM;

	IBase* pIBaseClassInstance = (IBase *)pObject;

	switch(pClassHashBuffer[0]) {
		case 0x06:
			static const RTTI_uint8 s_TurtleHash[] = { 0x06, 0xDE, 0xBA, 0x59, 0x08, 0xB0, 0x07, 0xEB, 0x6F, 0x32, 0xD8, 0xD9, 0x5F, 0x3F, 0x61, 0xB5, };
			if (memcmp(pClassHashBuffer, s_TurtleHash, 16) == 0) {
				*pImplementsInterface = dynamic_cast<ITurtle *>(pIBaseClassInstance) != nullptr;
				return RTTI_SUCCESS;
			}
			break;
		case 0x09:
			static const RTTI_uint8 s_BaseHash[] = { 0x09, 0x5A, 0x1B, 0x43, 0xEF, 0xFE, 0xC7, 0x39, 0x55, 0xE3, 0x1E, 0x79, 0x04, 0x38, 0xDE, 0x49, };
			if (memcmp(pClassHashBuffer, s_BaseHash, 16) == 0) {
				*pImplementsInterface = dynamic_cast<IBase *>(pIBaseClassInstance) != nullptr;
				return RTTI_SUCCESS;
			}
			break;
		case 0x16:
			static const RTTI_uint8 s_AnimalHash[] = { 0x16, 0x1E, 0x7C, 0xE7, 0xBF, 0xDC, 0x89, 0xAB, 0x4B, 0x9F, 0x52, 0xC1, 0xD4, 0xC9, 0x42, 0x12, };
			if (memcmp(pClassHashBuffer, s_AnimalHash, 16) == 0) {
				*pImplementsInterface = dynamic_cast<IAnimal *>(pIBaseClassInstance) != nullptr;
				return RTTI_SUCCESS;
			}
			break;
		case 0x37:
			static const RTTI_uint8 s_MammalHash[] = { 0x37, 0x42, 0x61, 0x13, 0xD1, 0x29, 0xE7, 0x9F, 0x54, 0x8F, 0x4C, 0x90, 0x93, 0x0F, 0xA6, 0x97, };
			if (memcmp(pClassHashBuffer, s_MammalHash, 16) == 0) {
				*pImplementsInterface = dynamic_cast<IMammal *>(pIBaseClassInstance) != nullptr;
				return RTTI_SUCCESS;
			}
			break;
		case 0x42:
			static const RTTI_uint8 s_GiraffeHash[] = { 0x42, 0x7D, 0xEB, 0xB8, 0x1D, 0x26, 0x5A, 0x0E, 0xDD, 0x87, 0x89, 0xF3, 0x0B, 0x11, 0xBE, 0xB6, };
			if (memcmp(pClassHashBuffer, s_GiraffeHash, 16) == 0) {
				*pImplementsInterface = dynamic_cast<IGiraffe *>(pIBaseClassInstance) != nullptr;
				return RTTI_SUCCESS;
			}
			break;
		case 0x45:
			static const RTTI_uint8 s_TigerHash[] = { 0x45, 0x4C, 0x98, 0x43, 0x11, 0x06, 0x86, 0xBF, 0x6F, 0x67, 0xCE, 0x51, 0x15, 0xB6, 0x66, 0x17, };
			if (memcmp(pClassHashBuffer, s_TigerHash, 16) == 0) {
				*pImplementsInterface = dynamic_cast<ITiger *>(pIBaseClassInstance) != nullptr;
				return RTTI_SUCCESS;
			}
			break;
		case 0xAA:
			static const RTTI_uint8 s_ReptileHash[] = { 0xAA, 0x64, 0x51, 0x86, 0xA4, 0xB5, 0xF3, 0xF2, 0x79, 0x52, 0xC2, 0xFA, 0x54, 0x85, 0xFA, 0xB2, };
			if (memcmp(pClassHashBuffer, s_ReptileHash, 16) == 0) {
				*pImplementsInterface = dynamic_cast<IReptile *>(pIBaseClassInstance) != nullptr;
				return RTTI_SUCCESS;
			}
			break;
		case 0xBF:
			static const RTTI_uint8 s_ZooHash[] = { 0xBF, 0xA8, 0x88, 0xA3, 0x54, 0xDB, 0x97, 0xC7, 0xCB, 0xEF, 0xB9, 0xD0, 0x50, 0xB9, 0x4C, 0xA3, };
			if (memcmp(pClassHashBuffer, s_ZooHash, 16) == 0) {
				*pImplementsInterface = dynamic_cast<IZoo *>(pIBaseClassInstance) != nullptr;
				return RTTI_SUCCESS;
			}
			break;
		case 0xC2:
			static const RTTI_uint8 s_AnimalIteratorHash[] = { 0xC2, 0xB3, 0x6A, 0x84, 0xC6, 0xC0, 0x32, 0x20, 0x4E, 0x5C, 0x92, 0x3C, 0x58, 0x10, 0x71, 0xE7, };
			if (memcmp(pClassHashBuffer, s_AnimalIteratorHash, 16) == 0) {
				*pImplementsInterface = dynamic_cast<IAnimalIterator *>(pIBaseClassInstance) != nullptr;
				return RTTI_SUCCESS;
			}
			break;
		case 0xDF:
			static const RTTI_uint8 s_SnakeHash[] = { 0xDF, 0xA9, 0x0F, 0x1B, 0x4E, 0xB3, 0xAF, 0xFB, 0xD3, 0xB4, 0x6A, 0xF3, 0x4E, 0xD2, 0x47, 0x7C, };
			if (memcmp(pClassHashBuffer, s_SnakeHash, 16) == 0) {
				*pImplementsInterface = dynamic_cast<ISnake *>(pIBaseClassInstance) != nullptr;
				return RTTI_SUCCESS;
			}
			break;
	}
	return RTTI_ERROR_INVALIDPARAM;
}

RTTIResult rtti_createzoo(RTTI_Zoo * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pInstance == nullptr)
			throw ERTTIInterfaceException (RTTI_ERROR_INVALIDPARAM);
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateZoo();

		*pInstance = (IBase*)(pBaseInstance);
		return RTTI_SUCCESS;
	}
	catch (ERTTIInterfaceException & Exception) {
		return handleRTTIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


