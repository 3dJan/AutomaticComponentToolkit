/*++

Copyright (C) 2021 ADSK

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of RTTI

Interface version: 1.0.0

*/

#ifndef __RTTI_CPPHEADER_IMPLICIT_CPP
#define __RTTI_CPPHEADER_IMPLICIT_CPP

#include "rtti_types.hpp"
#include "rtti_abi.hpp"


#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <array>
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace RTTI {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CAnimal;
class CMammal;
class CReptile;
class CGiraffe;
class CTiger;
class CSnake;
class CTurtle;
class CAnimalIterator;
class CZoo;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CRTTIWrapper;
typedef CBase CRTTIBase;
typedef CAnimal CRTTIAnimal;
typedef CMammal CRTTIMammal;
typedef CReptile CRTTIReptile;
typedef CGiraffe CRTTIGiraffe;
typedef CTiger CRTTITiger;
typedef CSnake CRTTISnake;
typedef CTurtle CRTTITurtle;
typedef CAnimalIterator CRTTIAnimalIterator;
typedef CZoo CRTTIZoo;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CAnimal> PAnimal;
typedef std::shared_ptr<CMammal> PMammal;
typedef std::shared_ptr<CReptile> PReptile;
typedef std::shared_ptr<CGiraffe> PGiraffe;
typedef std::shared_ptr<CTiger> PTiger;
typedef std::shared_ptr<CSnake> PSnake;
typedef std::shared_ptr<CTurtle> PTurtle;
typedef std::shared_ptr<CAnimalIterator> PAnimalIterator;
typedef std::shared_ptr<CZoo> PZoo;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PRTTIWrapper;
typedef PBase PRTTIBase;
typedef PAnimal PRTTIAnimal;
typedef PMammal PRTTIMammal;
typedef PReptile PRTTIReptile;
typedef PGiraffe PRTTIGiraffe;
typedef PTiger PRTTITiger;
typedef PSnake PRTTISnake;
typedef PTurtle PRTTITurtle;
typedef PAnimalIterator PRTTIAnimalIterator;
typedef PZoo PRTTIZoo;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	RTTIHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return RTTIHandleNull;
	}
};

/*************************************************************************************************************************
 Class ERTTIException 
**************************************************************************************************************************/
class ERTTIException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	RTTIResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ERTTIException(RTTIResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	RTTIResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case RTTI_SUCCESS: return "SUCCESS";
			case RTTI_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case RTTI_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case RTTI_ERROR_INVALIDCAST: return "INVALIDCAST";
			case RTTI_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case RTTI_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case RTTI_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case RTTI_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case RTTI_SUCCESS: return "success";
			case RTTI_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case RTTI_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case RTTI_ERROR_INVALIDCAST: return "a type cast failed";
			case RTTI_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case RTTI_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case RTTI_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case RTTI_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	explicit CInputVector( const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector( const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CRTTIInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	CWrapper()
	{
	}
	
	~CWrapper()
	{
	}
	static inline PWrapper loadLibrary()
	{
		return std::make_shared<CWrapper>();
	}
	
	inline void CheckError(CBase * pBaseClass, RTTIResult nResult);

	inline void GetVersion(RTTI_uint32 & nMajor, RTTI_uint32 & nMinor, RTTI_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const RTTI_pvoid pSymbolAddressMethod);
	inline RTTI_pvoid GetSymbolLookupMethod();
	inline PZoo CreateZoo();

	template<class U>
	std::shared_ptr<U> polymorphicFactory(RTTIHandle);

private:
	
	RTTIResult checkBinaryVersion()
	{
		RTTI_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if (nMajor != RTTI_VERSION_MAJOR) {
			return RTTI_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return RTTI_SUCCESS;
	}

	friend class CBase;
	friend class CAnimal;
	friend class CMammal;
	friend class CReptile;
	friend class CGiraffe;
	friend class CTiger;
	friend class CSnake;
	friend class CTurtle;
	friend class CAnimalIterator;
	friend class CZoo;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	RTTIHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(RTTIResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, RTTIHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	RTTIHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}

	friend class CWrapper;
	inline RTTI_uint64 ClassTypeId();
};
	
/*************************************************************************************************************************
 Class CAnimal 
**************************************************************************************************************************/
class CAnimal : public CBase {
public:
	
	/**
	* CAnimal::CAnimal - Constructor for Animal class.
	*/
	CAnimal(CWrapper* pWrapper, RTTIHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string Name();
};
	
/*************************************************************************************************************************
 Class CMammal 
**************************************************************************************************************************/
class CMammal : public CAnimal {
public:
	
	/**
	* CMammal::CMammal - Constructor for Mammal class.
	*/
	CMammal(CWrapper* pWrapper, RTTIHandle pHandle)
		: CAnimal(pWrapper, pHandle)
	{
	}
	
};
	
/*************************************************************************************************************************
 Class CReptile 
**************************************************************************************************************************/
class CReptile : public CAnimal {
public:
	
	/**
	* CReptile::CReptile - Constructor for Reptile class.
	*/
	CReptile(CWrapper* pWrapper, RTTIHandle pHandle)
		: CAnimal(pWrapper, pHandle)
	{
	}
	
};
	
/*************************************************************************************************************************
 Class CGiraffe 
**************************************************************************************************************************/
class CGiraffe : public CMammal {
public:
	
	/**
	* CGiraffe::CGiraffe - Constructor for Giraffe class.
	*/
	CGiraffe(CWrapper* pWrapper, RTTIHandle pHandle)
		: CMammal(pWrapper, pHandle)
	{
	}
	
};
	
/*************************************************************************************************************************
 Class CTiger 
**************************************************************************************************************************/
class CTiger : public CMammal {
public:
	
	/**
	* CTiger::CTiger - Constructor for Tiger class.
	*/
	CTiger(CWrapper* pWrapper, RTTIHandle pHandle)
		: CMammal(pWrapper, pHandle)
	{
	}
	
	inline void Roar();
};
	
/*************************************************************************************************************************
 Class CSnake 
**************************************************************************************************************************/
class CSnake : public CReptile {
public:
	
	/**
	* CSnake::CSnake - Constructor for Snake class.
	*/
	CSnake(CWrapper* pWrapper, RTTIHandle pHandle)
		: CReptile(pWrapper, pHandle)
	{
	}
	
};
	
/*************************************************************************************************************************
 Class CTurtle 
**************************************************************************************************************************/
class CTurtle : public CReptile {
public:
	
	/**
	* CTurtle::CTurtle - Constructor for Turtle class.
	*/
	CTurtle(CWrapper* pWrapper, RTTIHandle pHandle)
		: CReptile(pWrapper, pHandle)
	{
	}
	
};
	
/*************************************************************************************************************************
 Class CAnimalIterator 
**************************************************************************************************************************/
class CAnimalIterator : public CBase {
public:
	
	/**
	* CAnimalIterator::CAnimalIterator - Constructor for AnimalIterator class.
	*/
	CAnimalIterator(CWrapper* pWrapper, RTTIHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline PAnimal GetNextAnimal();
};
	
/*************************************************************************************************************************
 Class CZoo 
**************************************************************************************************************************/
class CZoo : public CBase {
public:
	
	/**
	* CZoo::CZoo - Constructor for Zoo class.
	*/
	CZoo(CWrapper* pWrapper, RTTIHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline PAnimalIterator Iterator();
};

/*************************************************************************************************************************
 RTTI: Polymorphic Factory implementation
**************************************************************************************************************************/

template <class T>
std::shared_ptr<T> CWrapper::polymorphicFactory(RTTIHandle pHandle)
{
	switch(pHandle.ClassTypeId) {
		case 0x1549AD28813DAE05UL: return std::dynamic_pointer_cast<T>(std::make_shared<CBase>(this, pHandle)); break; // First 64 bits of SHA1 of a string: "RTTI::Base"
		case 0x8B40467DA6D327AFUL: return std::dynamic_pointer_cast<T>(std::make_shared<CAnimal>(this, pHandle)); break; // First 64 bits of SHA1 of a string: "RTTI::Animal"
		case 0xBC9D5FA7750C1020UL: return std::dynamic_pointer_cast<T>(std::make_shared<CMammal>(this, pHandle)); break; // First 64 bits of SHA1 of a string: "RTTI::Mammal"
		case 0x6756AA8EA5802EC3UL: return std::dynamic_pointer_cast<T>(std::make_shared<CReptile>(this, pHandle)); break; // First 64 bits of SHA1 of a string: "RTTI::Reptile"
		case 0x9751971BD2C2D958UL: return std::dynamic_pointer_cast<T>(std::make_shared<CGiraffe>(this, pHandle)); break; // First 64 bits of SHA1 of a string: "RTTI::Giraffe"
		case 0x08D007E7B5F7BAF4UL: return std::dynamic_pointer_cast<T>(std::make_shared<CTiger>(this, pHandle)); break; // First 64 bits of SHA1 of a string: "RTTI::Tiger"
		case 0x5F6826EF909803B2UL: return std::dynamic_pointer_cast<T>(std::make_shared<CSnake>(this, pHandle)); break; // First 64 bits of SHA1 of a string: "RTTI::Snake"
		case 0x8E551B208A2E8321UL: return std::dynamic_pointer_cast<T>(std::make_shared<CTurtle>(this, pHandle)); break; // First 64 bits of SHA1 of a string: "RTTI::Turtle"
		case 0xF1917FE6BBE77831UL: return std::dynamic_pointer_cast<T>(std::make_shared<CAnimalIterator>(this, pHandle)); break; // First 64 bits of SHA1 of a string: "RTTI::AnimalIterator"
		case 0x2262ABE80A5E7878UL: return std::dynamic_pointer_cast<T>(std::make_shared<CZoo>(this, pHandle)); break; // First 64 bits of SHA1 of a string: "RTTI::Zoo"
	}
	return std::make_shared<T>(this, pHandle);
}
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(RTTI_uint32 & nMajor, RTTI_uint32 & nMinor, RTTI_uint32 & nMicro)
	{
		CheckError(nullptr,rtti_getversion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		RTTIHandle hInstance = pInstance.GetHandle();
		RTTI_uint32 bytesNeededErrorMessage = 0;
		RTTI_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,rtti_getlasterror(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,rtti_getlasterror(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		RTTIHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,rtti_releaseinstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		RTTIHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,rtti_acquireinstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const RTTI_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,rtti_injectcomponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (!bNameSpaceFound)
			throw ERTTIException(RTTI_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline RTTI_pvoid CWrapper::GetSymbolLookupMethod()
	{
		RTTI_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,rtti_getsymbollookupmethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateZoo - Create a new zoo with animals
	* @return 
	*/
	inline PZoo CWrapper::CreateZoo()
	{
		RTTIHandle hInstance = RTTIHandleNull;
		CheckError(nullptr,rtti_createzoo(&hInstance));
		
		if (!hInstance.Handle) {
			CheckError(nullptr,RTTI_ERROR_INVALIDPARAM);
		}
		return this->polymorphicFactory<CZoo>(hInstance);
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, RTTIResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ERTTIException(nResult, sErrorMessage);
		}
	}
	

	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	* CBase::ClassTypeId - Get Class Type Id
	* @return Class type as a 64 bits integer
	*/
	RTTI_uint64 CBase::ClassTypeId()
	{
		RTTI_uint64 resultClassTypeId = 0;
		CheckError(rtti_base_classtypeid(m_pHandle, &resultClassTypeId));
		
		return resultClassTypeId;
	}
	
	/**
	 * Method definitions for class CAnimal
	 */
	
	/**
	* CAnimal::Name - Get the name of the animal
	* @return 
	*/
	std::string CAnimal::Name()
	{
		RTTI_uint32 bytesNeededResult = 0;
		RTTI_uint32 bytesWrittenResult = 0;
		CheckError(rtti_animal_name(m_pHandle, 0, &bytesNeededResult, nullptr));
		std::vector<char> bufferResult(bytesNeededResult);
		CheckError(rtti_animal_name(m_pHandle, bytesNeededResult, &bytesWrittenResult, &bufferResult[0]));
		
		return std::string(&bufferResult[0]);
	}
	
	/**
	 * Method definitions for class CMammal
	 */
	
	/**
	 * Method definitions for class CReptile
	 */
	
	/**
	 * Method definitions for class CGiraffe
	 */
	
	/**
	 * Method definitions for class CTiger
	 */
	
	/**
	* CTiger::Roar - Roar like a tiger
	*/
	void CTiger::Roar()
	{
		CheckError(rtti_tiger_roar(m_pHandle));
	}
	
	/**
	 * Method definitions for class CSnake
	 */
	
	/**
	 * Method definitions for class CTurtle
	 */
	
	/**
	 * Method definitions for class CAnimalIterator
	 */
	
	/**
	* CAnimalIterator::GetNextAnimal - Return next animal
	* @return 
	*/
	PAnimal CAnimalIterator::GetNextAnimal()
	{
		RTTIHandle hAnimal = RTTIHandleNull;
		CheckError(rtti_animaliterator_getnextanimal(m_pHandle, &hAnimal));
		
		if (hAnimal.Handle) {
			return m_pWrapper->polymorphicFactory<CAnimal>(hAnimal);
		} else {
			return nullptr;
		}
	}
	
	/**
	 * Method definitions for class CZoo
	 */
	
	/**
	* CZoo::Iterator - Return an iterator over all zoo animals
	* @return 
	*/
	PAnimalIterator CZoo::Iterator()
	{
		RTTIHandle hIterator = RTTIHandleNull;
		CheckError(rtti_zoo_iterator(m_pHandle, &hIterator));
		
		if (!hIterator.Handle) {
			CheckError(RTTI_ERROR_INVALIDPARAM);
		}
		return m_pWrapper->polymorphicFactory<CAnimalIterator>(hIterator);
	}

} // namespace RTTI

#endif // __RTTI_CPPHEADER_IMPLICIT_CPP

