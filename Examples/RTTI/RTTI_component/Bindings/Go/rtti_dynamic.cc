/*++

Copyright (C) 2021 ADSK

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated plain C Header file in order to allow an easy
 use of RTTI

Interface version: 1.0.0

*/

#include "rtti_types.h"
#include "rtti_dynamic.h"
#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#include <stdlib.h>
#endif // _WIN32

RTTIResult InitRTTIWrapperTable(sRTTIDynamicWrapperTable * pWrapperTable)
{
	if (pWrapperTable == NULL)
		return RTTI_ERROR_INVALIDPARAM;
	
	pWrapperTable->m_LibraryHandle = NULL;
	pWrapperTable->m_Base_ClassTypeId = NULL;
	pWrapperTable->m_Animal_Name = NULL;
	pWrapperTable->m_Tiger_Roar = NULL;
	pWrapperTable->m_AnimalIterator_GetNextAnimal = NULL;
	pWrapperTable->m_AnimalIterator_GetNextOptinalAnimal = NULL;
	pWrapperTable->m_AnimalIterator_GetNextMandatoryAnimal = NULL;
	pWrapperTable->m_Zoo_Iterator = NULL;
	pWrapperTable->m_GetVersion = NULL;
	pWrapperTable->m_GetLastError = NULL;
	pWrapperTable->m_ReleaseInstance = NULL;
	pWrapperTable->m_AcquireInstance = NULL;
	pWrapperTable->m_InjectComponent = NULL;
	pWrapperTable->m_GetSymbolLookupMethod = NULL;
	pWrapperTable->m_CreateZoo = NULL;
	
	return RTTI_SUCCESS;
}

RTTIResult ReleaseRTTIWrapperTable(sRTTIDynamicWrapperTable * pWrapperTable)
{
	if (pWrapperTable == NULL)
		return RTTI_ERROR_INVALIDPARAM;
	
	if (pWrapperTable->m_LibraryHandle != NULL) {
	#ifdef _WIN32
		HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
		FreeLibrary(hModule);
	#else // _WIN32
		dlclose(pWrapperTable->m_LibraryHandle);
	#endif // _WIN32
		return InitRTTIWrapperTable(pWrapperTable);
	}
	
	return RTTI_SUCCESS;
}

RTTIResult LoadRTTIWrapperTable(sRTTIDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
{
	if (pWrapperTable == NULL)
		return RTTI_ERROR_INVALIDPARAM;
	if (pLibraryFileName == NULL)
		return RTTI_ERROR_INVALIDPARAM;
	
	#ifdef _WIN32
	// Convert filename to UTF16-string
	int nLength = static_cast<int>(strnlen_s(pLibraryFileName, MAX_PATH));
	int nBufferSize = nLength * 2 + 2;
	wchar_t* wsLibraryFileName = (wchar_t*)malloc(nBufferSize*sizeof(wchar_t));
	memset(wsLibraryFileName, 0, nBufferSize*sizeof(wchar_t));
	int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, wsLibraryFileName, nBufferSize);
	if (nResult == 0) {
		free(wsLibraryFileName);
		return RTTI_ERROR_COULDNOTLOADLIBRARY;
	}
	
	HMODULE hLibrary = LoadLibraryW(wsLibraryFileName);
	free(wsLibraryFileName);
	if (hLibrary == 0) 
		return RTTI_ERROR_COULDNOTLOADLIBRARY;
	#else // _WIN32
	void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
	if (hLibrary == 0) 
		return RTTI_ERROR_COULDNOTLOADLIBRARY;
	dlerror();
	#endif // _WIN32
	
	#ifdef _WIN32
	pWrapperTable->m_Base_ClassTypeId = (PRTTIBase_ClassTypeIdPtr) GetProcAddress(hLibrary, "rtti_base_classtypeid");
	#else // _WIN32
	pWrapperTable->m_Base_ClassTypeId = (PRTTIBase_ClassTypeIdPtr) dlsym(hLibrary, "rtti_base_classtypeid");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_Base_ClassTypeId == NULL)
		return RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_Animal_Name = (PRTTIAnimal_NamePtr) GetProcAddress(hLibrary, "rtti_animal_name");
	#else // _WIN32
	pWrapperTable->m_Animal_Name = (PRTTIAnimal_NamePtr) dlsym(hLibrary, "rtti_animal_name");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_Animal_Name == NULL)
		return RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_Tiger_Roar = (PRTTITiger_RoarPtr) GetProcAddress(hLibrary, "rtti_tiger_roar");
	#else // _WIN32
	pWrapperTable->m_Tiger_Roar = (PRTTITiger_RoarPtr) dlsym(hLibrary, "rtti_tiger_roar");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_Tiger_Roar == NULL)
		return RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_AnimalIterator_GetNextAnimal = (PRTTIAnimalIterator_GetNextAnimalPtr) GetProcAddress(hLibrary, "rtti_animaliterator_getnextanimal");
	#else // _WIN32
	pWrapperTable->m_AnimalIterator_GetNextAnimal = (PRTTIAnimalIterator_GetNextAnimalPtr) dlsym(hLibrary, "rtti_animaliterator_getnextanimal");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_AnimalIterator_GetNextAnimal == NULL)
		return RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_AnimalIterator_GetNextOptinalAnimal = (PRTTIAnimalIterator_GetNextOptinalAnimalPtr) GetProcAddress(hLibrary, "rtti_animaliterator_getnextoptinalanimal");
	#else // _WIN32
	pWrapperTable->m_AnimalIterator_GetNextOptinalAnimal = (PRTTIAnimalIterator_GetNextOptinalAnimalPtr) dlsym(hLibrary, "rtti_animaliterator_getnextoptinalanimal");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_AnimalIterator_GetNextOptinalAnimal == NULL)
		return RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_AnimalIterator_GetNextMandatoryAnimal = (PRTTIAnimalIterator_GetNextMandatoryAnimalPtr) GetProcAddress(hLibrary, "rtti_animaliterator_getnextmandatoryanimal");
	#else // _WIN32
	pWrapperTable->m_AnimalIterator_GetNextMandatoryAnimal = (PRTTIAnimalIterator_GetNextMandatoryAnimalPtr) dlsym(hLibrary, "rtti_animaliterator_getnextmandatoryanimal");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_AnimalIterator_GetNextMandatoryAnimal == NULL)
		return RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_Zoo_Iterator = (PRTTIZoo_IteratorPtr) GetProcAddress(hLibrary, "rtti_zoo_iterator");
	#else // _WIN32
	pWrapperTable->m_Zoo_Iterator = (PRTTIZoo_IteratorPtr) dlsym(hLibrary, "rtti_zoo_iterator");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_Zoo_Iterator == NULL)
		return RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_GetVersion = (PRTTIGetVersionPtr) GetProcAddress(hLibrary, "rtti_getversion");
	#else // _WIN32
	pWrapperTable->m_GetVersion = (PRTTIGetVersionPtr) dlsym(hLibrary, "rtti_getversion");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_GetVersion == NULL)
		return RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_GetLastError = (PRTTIGetLastErrorPtr) GetProcAddress(hLibrary, "rtti_getlasterror");
	#else // _WIN32
	pWrapperTable->m_GetLastError = (PRTTIGetLastErrorPtr) dlsym(hLibrary, "rtti_getlasterror");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_GetLastError == NULL)
		return RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_ReleaseInstance = (PRTTIReleaseInstancePtr) GetProcAddress(hLibrary, "rtti_releaseinstance");
	#else // _WIN32
	pWrapperTable->m_ReleaseInstance = (PRTTIReleaseInstancePtr) dlsym(hLibrary, "rtti_releaseinstance");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_ReleaseInstance == NULL)
		return RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_AcquireInstance = (PRTTIAcquireInstancePtr) GetProcAddress(hLibrary, "rtti_acquireinstance");
	#else // _WIN32
	pWrapperTable->m_AcquireInstance = (PRTTIAcquireInstancePtr) dlsym(hLibrary, "rtti_acquireinstance");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_AcquireInstance == NULL)
		return RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_InjectComponent = (PRTTIInjectComponentPtr) GetProcAddress(hLibrary, "rtti_injectcomponent");
	#else // _WIN32
	pWrapperTable->m_InjectComponent = (PRTTIInjectComponentPtr) dlsym(hLibrary, "rtti_injectcomponent");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_InjectComponent == NULL)
		return RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_GetSymbolLookupMethod = (PRTTIGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "rtti_getsymbollookupmethod");
	#else // _WIN32
	pWrapperTable->m_GetSymbolLookupMethod = (PRTTIGetSymbolLookupMethodPtr) dlsym(hLibrary, "rtti_getsymbollookupmethod");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_GetSymbolLookupMethod == NULL)
		return RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_CreateZoo = (PRTTICreateZooPtr) GetProcAddress(hLibrary, "rtti_createzoo");
	#else // _WIN32
	pWrapperTable->m_CreateZoo = (PRTTICreateZooPtr) dlsym(hLibrary, "rtti_createzoo");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_CreateZoo == NULL)
		return RTTI_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	pWrapperTable->m_LibraryHandle = hLibrary;
	return RTTI_SUCCESS;
}

