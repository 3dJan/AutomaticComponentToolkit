/*++

Copyright (C) 2020 ADSK

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ application that demonstrates the
 usage of the Dynamic C++ bindings of RTTI

Interface version: 1.0.0

*/

#include <iostream>
#include <cassert>
#include "rtti_dynamic.hpp"


int main()
{
	try
	{
		std::string libpath = (""); // TODO: put the location of the RTTI-library file here.
		auto wrapper = RTTI::CWrapper::loadLibrary(libpath + "rtti."
#if defined _WIN32
		"dll"
#elif defined __APPLE__
		"dylib"
#elif defined __linux__
		"so"
#endif
		); // TODO: add correct suffix of the library
		RTTI_uint32 nMajor, nMinor, nMicro;
		wrapper->GetVersion(nMajor, nMinor, nMicro);
		std::cout << "RTTI.Version = " << nMajor << "." << nMinor << "." << nMicro;
		std::cout << std::endl;

		auto zoo = wrapper->CreateZoo();
		auto iter = zoo->Iterator();

		using namespace RTTI;

		PAnimal animal;
		// Animal name: Gerald Giraffe
		animal = iter->GetNextAnimal();
		assert(animal != nullptr);
		assert(animal->Name() == "Gerald Giraffe");
		assert(std::dynamic_pointer_cast<CGiraffe>(animal) != nullptr);

		// Animal name: Timmy Tiger
		animal = iter->GetNextAnimal();
		assert(animal != nullptr);
		assert(animal->Name() == "Timmy Tiger");
		assert(std::dynamic_pointer_cast<CTiger>(animal) != nullptr);
		std::dynamic_pointer_cast<CTiger>(animal)->Roar();

		// Animal name: Tony Tiger
		animal = iter->GetNextAnimal();
		assert(animal != nullptr);
		assert(animal->Name() == "Tony Tiger");
		assert(std::dynamic_pointer_cast<CTiger>(animal) != nullptr);
		std::dynamic_pointer_cast<CTiger>(animal)->Roar();

		// Animal name: Sebastian Snake
		animal = iter->GetNextAnimal();
		assert(animal != nullptr);
		assert(animal->Name() == "Sebastian Snake");
		assert(std::dynamic_pointer_cast<CSnake>(animal) != nullptr);

		// Animal name: Tobias Turtle
		animal = iter->GetNextAnimal();
		assert(animal != nullptr);
		assert(animal->Name() == "Tobias Turtle");
		assert(std::dynamic_pointer_cast<CTurtle>(animal) != nullptr);

		// Animal name: Theo Turtle
		animal = iter->GetNextAnimal();
		assert(animal != nullptr);
		assert(animal->Name() == "Theo Turtle");
		assert(std::dynamic_pointer_cast<CTurtle>(animal) != nullptr);

		// Animal name: Tomás Turtle
		animal = iter->GetNextAnimal();
		assert(animal != nullptr);
		assert(animal->Name() == "Tomás Turtle");
		assert(std::dynamic_pointer_cast<CTurtle>(animal) != nullptr);

		// Animal name: Slytherin Snake
		animal = iter->GetNextAnimal();
		assert(animal != nullptr);
		assert(animal->Name() == "Slytherin Snake");
		assert(std::dynamic_pointer_cast<CSnake>(animal) != nullptr);

		// Animal name: Travis Tiger
		animal = iter->GetNextAnimal();
		assert(animal != nullptr);
		assert(animal->Name() == "Travis Tiger");
		assert(std::dynamic_pointer_cast<CTiger>(animal) != nullptr);
		std::dynamic_pointer_cast<CTiger>(animal)->Roar();

		// Animal name: Gary Giraffe
		animal = iter->GetNextAnimal();
		assert(animal != nullptr);
		assert(animal->Name() == "Gary Giraffe");
		assert(std::dynamic_pointer_cast<CGiraffe>(animal) != nullptr);
		
		std::cout << "Trace 0" << std::endl;

		animal = iter->GetNextAnimal();
		assert(animal == nullptr);

		std::cout << "Trace 1" << std::endl;
	}
	catch (std::exception &e)
	{
		std::cout << e.what() << std::endl;
		return 1;
	}
	return 0;
}

