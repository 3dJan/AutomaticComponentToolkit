/*++

Copyright (C) 2018 Autodesk Inc. (Original Author)

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

--*/

//////////////////////////////////////////////////////////////////////////////////////////////////////
// buildbindingjava.go
// functions to generate dynamic Java-bindings of a library's API using Java Native Access (JNA).
//////////////////////////////////////////////////////////////////////////////////////////////////////

package main

import (
	"fmt"
	"log"
	"path"
	"strings"
	"bytes"
	"os"
)

type javaParameter struct {
	ParamType             string
	ParamName             string
	ParamComment          string
	ParamConvention       string
	ParamTypeNoConvention string
}

// BuildBindingJavaDynamic builds dynamic Java-bindings of a library's API using Java Native Access (JNA).
func BuildBindingJavaDynamic(component ComponentDefinition, outputFolder string, outputFolderExample string, indent string) error {
	namespace := component.NameSpace
	libraryname := component.LibraryName
	JavaFolder := path.Join(outputFolder, strings.ToLower(namespace));
	err := os.MkdirAll(JavaFolder, os.ModePerm)
	if err != nil {
		return err;
	}
	
	JavaWrapperName := namespace + "Wrapper";
	JavaWrapperPath := path.Join(JavaFolder, JavaWrapperName + ".java");
	log.Printf("Creating \"%s\"", JavaWrapperPath)
	JavaWrapperFile, err := CreateLanguageFile (JavaWrapperPath, indent)
	if err != nil {
		return err;
	}

	JavaWrapperFile.WriteJavaLicenseHeader(component,
		fmt.Sprintf("This is an autogenerated Java file in order to allow an easy\n use of %s", libraryname),
		true)
	
	err = buildJavaWrapper(component, JavaWrapperFile, indent)
	if err != nil {
		return err;
	}

	JavaExceptionName := namespace + "Exception";
	JavaExceptionPath := path.Join(JavaFolder, JavaExceptionName + ".java");
	log.Printf("Creating \"%s\"", JavaExceptionPath)
	JavaExceptionFile, err1 := CreateLanguageFile (JavaExceptionPath, indent)
	if err1 != nil {
		return err1;
	}

	JavaExceptionFile.WriteJavaLicenseHeader(component,
		fmt.Sprintf("This is an autogenerated Java file in order to allow an easy\n use of %s", libraryname),
		true)
	
	err = buildJavaException(component, JavaExceptionFile, indent)
	if err != nil {
		return err;
	}

	for i := 0; i < len(component.Structs); i++ {
		structinfo := component.Structs[i]
		JavaStructPath := path.Join(JavaFolder, structinfo.Name + ".java");
		log.Printf("Creating \"%s\"", JavaStructPath)

		JavaStructFile, err := CreateLanguageFile (JavaStructPath, indent)
		if err != nil {
			return err;
		}

		JavaStructFile.WriteJavaLicenseHeader(component,
			fmt.Sprintf("This is an autogenerated Java file in order to allow an easy\n use of %s", libraryname),
			true)
	
		err = buildJavaStruct(component, JavaStructFile, indent, structinfo)
		if err != nil {
			return err;
		}
	}

	for i := 0; i < len(component.Classes); i++ {
		class := component.Classes[i]
		JavaClassPath := path.Join(JavaFolder, class.ClassName + ".java");
		log.Printf("Creating \"%s\"", JavaClassPath)

		JavaClassFile, err := CreateLanguageFile (JavaClassPath, indent)
		if err != nil {
			return err;
		}

		JavaClassFile.WriteJavaLicenseHeader(component,
			fmt.Sprintf("This is an autogenerated Java file in order to allow an easy\n use of %s", libraryname),
			true)
	
		err = buildJavaClass(component, JavaClassFile, indent, class)
		if err != nil {
			return err;
		}
	}

	JavaBuildName := "build_jar.sh";
	JavaBuildPath := path.Join(outputFolder, JavaBuildName);
	log.Printf("Creating \"%s\"", JavaBuildPath)
	JavaWrapperFile, err2 := CreateLanguageFile (JavaBuildPath, indent)
	if err2 != nil {
		return err2;
	}
	err = buildJavaBuildScript(component, JavaWrapperFile)
	if err != nil {
		return err;
	}

	return nil;
}

func buildJavaBuildScript(component ComponentDefinition, w LanguageWriter) error {
	sources := strings.ToLower(component.NameSpace)

	w.Writeln("#!/bin/bash")
	w.Writeln("")
	w.Writeln("echo \"Download JNA\"")
	w.Writeln("wget http://repo1.maven.org/maven2/net/java/dev/jna/jna/5.5.0/jna-5.5.0.jar")
	w.Writeln("")
	w.Writeln("echo \"Compile Java Bindings\"")
	w.Writeln("javac -classpath *.jar %s/*", sources)
	w.Writeln("")
	w.Writeln("echo \"Create JAR\"")
	w.Writeln("jar cvf %s-%s.jar %s", sources, component.Version, sources)
	return nil;
}


func buildJavaException(component ComponentDefinition, w LanguageWriter, indent string) error {
	NameSpace := component.NameSpace
	w.Writeln("package %s;", strings.ToLower(component.NameSpace))
	w.Writeln("")
	w.Writeln("import java.util.HashMap;")
	w.Writeln("import java.util.Map;")
	w.Writeln("")
	// Write exception
	w.Writeln("public class %sException extends Exception {", NameSpace)
	w.Writeln("")
	// Write error codes
	w.Writeln(indent + "// Error Constants for %s", NameSpace)
	w.Writeln(indent + "public static final int %s_SUCCESS = 0;", strings.ToUpper(NameSpace))
	for i := 0; i < len(component.Errors.Errors); i++ {
		errorcode := component.Errors.Errors[i]
		w.Writeln(indent + "public static final int %s_ERROR_%s = %d;", strings.ToUpper(NameSpace), errorcode.Name, errorcode.Code)
	}
	w.Writeln("")
	w.Writeln(indent + "public static final Map<Integer, String> ErrorCodeMap = new HashMap<Integer, String>();")
	w.Writeln("")
	w.Writeln(indent + "static {")
	for i := 0; i < len(component.Errors.Errors); i++ {
		errorcode := component.Errors.Errors[i]
		w.Writeln(indent + indent + "ErrorCodeMap.put(%s_ERROR_%s, \"%s_ERROR_%s\");", strings.ToUpper(NameSpace), errorcode.Name, strings.ToUpper(NameSpace), errorcode.Name)
	}
	w.Writeln(indent + "}")
	w.Writeln("")
	w.Writeln(indent + "protected int mErrorCode;")
	w.Writeln("")
	w.Writeln(indent + "protected String mErrorDescription;")
	w.Writeln("")
	w.Writeln(indent + "public " + NameSpace + "Exception(int errorCode, String message){")
	w.Writeln(indent + indent + "super(message);")
	w.Writeln(indent + indent + "mErrorCode = errorCode;")
	w.Writeln(indent + indent + "mErrorDescription = ErrorCodeMap.get(errorCode);")
	w.Writeln(indent + "}")
	w.Writeln("")
	w.Writeln(indent + "@Override")
	w.Writeln(indent + "public String toString() {")
	w.Writeln(indent + indent + "return getMessage() + \" (\" + mErrorCode + \" \" + mErrorDescription + \")\";")
	w.Writeln(indent + "}")
	w.Writeln("}")
	w.Writeln("")
	return nil;
}

func buildJavaClass(component ComponentDefinition, w LanguageWriter, indent string, class ComponentDefinitionClass) error {
	NameSpace := component.NameSpace
	w.Writeln("package %s;", strings.ToLower(component.NameSpace))
	w.Writeln("")
	w.Writeln("import com.sun.jna.Library;")
	w.Writeln("import com.sun.jna.Memory;")
	w.Writeln("import com.sun.jna.Native;")
	w.Writeln("import com.sun.jna.Pointer;")
	w.Writeln("")
	w.Writeln("import java.nio.charset.StandardCharsets;");
	w.Writeln("import java.util.Arrays;")
	w.Writeln("import java.util.List;")
	w.Writeln("")
	if component.isBaseClass(class) {
		w.Writeln("public class %s {", class.ClassName)
		w.Writeln("")
	} else {
		ParentClass := class.ParentClass
		if ParentClass == "" {
			ParentClass = component.Global.BaseClassName
		}
		w.Writeln("public class %s extends %s {", class.ClassName, ParentClass)
		w.Writeln("")		
	}
	w.Writeln(indent + "public static class Out { public %s value; }", class.ClassName)
	w.Writeln("")
	w.Writeln(indent + "public static class ArrayOut { public %s value[]; }", class.ClassName)
	w.Writeln("")
	if component.isBaseClass(class) {
		w.Writeln(indent + "protected Pointer mHandle;");
		w.Writeln("")
		w.Writeln(indent + "protected %sWrapper mWrapper;", component.NameSpace);
		w.Writeln("")
	}

	w.Writeln(indent + "protected %s(%sWrapper wrapper, Pointer handle) {", class.ClassName, component.NameSpace);
	if component.isBaseClass(class) {
		w.Writeln(indent + indent + "mHandle = handle;");
		w.Writeln(indent + indent + "mWrapper = wrapper;");
	} else {
		w.Writeln(indent + indent + "super(wrapper, handle);");
	}
	w.Writeln(indent + "}");
	w.Writeln("")

	if component.isBaseClass(class) {
		w.Writeln(indent + "@Override")
		w.Writeln(indent + "protected void finalize() throws Throwable {")
		w.Writeln(indent + indent + "mWrapper.%s(this);", MakeFirstLowerCase(component.Global.ReleaseMethod))
		w.Writeln(indent + indent + "super.finalize();")
		w.Writeln(indent + "}")
		w.Writeln("")
	}

	for j := 0; j < len(class.Methods); j++ {
		method := class.Methods[j]

		err := writeJavaClassMethodImplementation(method, w, NameSpace, class.ClassName, indent, false)
		if err != nil {
			return err
		}
	}

	w.Writeln("")
	w.Writeln("}")
	w.Writeln("")
	return nil;
}

func writeJavaClassMethodImplementation(method ComponentDefinitionMethod, w LanguageWriter, NameSpace string, ClassName string, indent string, isGlobal bool) error {

	parameters := ""
	returnType := "void"

	for k := 0; k < len(method.Params); k++ {
		param := method.Params[k]
		ParamTypeName, _, err := getJavaParameterType(param.ParamType, NameSpace, param.ParamClass, param.ParamPass, false)
		if err != nil {
			return err
		}

		switch param.ParamPass {
		case "in":
			if parameters != "" {
				parameters = parameters + ", "
			}
			parameters = parameters + ParamTypeName + " " + MakeFirstLowerCase(param.ParamName)

		case "out":
			if parameters != "" {
				parameters = parameters + ", "
			}
			parameters = parameters + ParamTypeName + " " + MakeFirstLowerCase(param.ParamName)

		case "return":
			if returnType != "void" {
				return fmt.Errorf("duplicate return value \"%s\" for Pascal method \"%s\"", param.ParamName, method.MethodName)
			}
			returnType = ParamTypeName
		}
	}

	defineCommands := make([]string, 0)
	initCommands := make([]string, 0)
	resultCommands := make([]string, 0)
	postInitCommands := make([]string, 0)
	wrapperCallPrefix := ""
	wrapperInstanceName := ""

	doInitCall := false

	callFunctionName := ""
	callFunctionParameters := ""
	initCallParameters := ""
	errorInstanceHandle := ""
	returnStmt := ""

	if isGlobal {
		callFunctionName = fmt.Sprintf("mInterface.%s_%s", strings.ToLower(NameSpace), strings.ToLower(method.MethodName))
		errorInstanceHandle = "null"
		wrapperInstanceName = "this"
	} else {
		callFunctionName = fmt.Sprintf("mInterface.%s_%s_%s", strings.ToLower(NameSpace), strings.ToLower(ClassName), strings.ToLower(method.MethodName))
		callFunctionParameters = "mHandle"
		errorInstanceHandle = "this"
		wrapperCallPrefix = "mWrapper."
		wrapperInstanceName = "mWrapper"
	}

	initCallParameters = callFunctionParameters
	w.Writeln(indent + "/**")
	w.Writeln(indent + " * " + method.MethodDescription)
	w.Writeln(indent + " *")

	for k := 0; k < len(method.Params); k++ {
		param := method.Params[k]
		PlainParamTypeName, bytes, err := getJavaParameterType(param.ParamType, NameSpace, param.ParamClass, "in", false)
		if err != nil {
			return err
		}

		if callFunctionParameters != "" {
			callFunctionParameters = callFunctionParameters + ", "
		}

		if initCallParameters != "" {
			initCallParameters = initCallParameters + ", "
		}
		if (param.ParamPass != "return") {
			w.Writeln(indent + " * @param %s %s", MakeFirstLowerCase(param.ParamName), param.ParamDescription)
		} else {
			w.Writeln(indent + " * @return %s", param.ParamDescription)
		}

		switch param.ParamPass {
		case "in":

			switch param.ParamType {
			case "uint8", "uint16", "uint32", "uint64", "int8", "int16", "int32", "int64", "single", "bool", "double", "pointer":
				callFunctionParameters = callFunctionParameters + MakeFirstLowerCase(param.ParamName)
				initCallParameters = initCallParameters + MakeFirstLowerCase(param.ParamName)

			case "string":
				initCommands = append(initCommands, "byte[] bytes" + param.ParamName + " = " + MakeFirstLowerCase(param.ParamName) + ".getBytes(StandardCharsets.UTF_8);")
				initCommands = append(initCommands, "Memory buffer" + param.ParamName + " = new Memory(bytes" + param.ParamName + ".length + 1);")
				initCommands = append(initCommands, "buffer" + param.ParamName + ".write(0, bytes" + param.ParamName + ", 0, bytes" + param.ParamName + ".length);")
				initCommands = append(initCommands, "buffer" + param.ParamName + ".setByte(bytes" + param.ParamName + ".length, (byte)0);")
				callFunctionParameters = callFunctionParameters + "buffer" + param.ParamName
				initCallParameters = initCallParameters + "buffer" + param.ParamName

			case "enum":
				addParam := fmt.Sprintf("%sWrapper.EnumConversion.convert%sToConst(%s)", NameSpace, param.ParamClass, MakeFirstLowerCase(param.ParamName))
				callFunctionParameters = callFunctionParameters + addParam
				initCallParameters = initCallParameters + addParam

			case "basicarray":
				ArrayType, ElementBytes, err := getJavaParameterType(param.ParamClass, "", "", "in", false)
				if err != nil {
					return err
				}
				Value := MakeFirstLowerCase(param.ParamName) + "[i]"
				if param.ParamClass == "bool" {
					ArrayType = "byte"
					Value = "(byte)(" + MakeFirstLowerCase(param.ParamName) + "[i] ? 1 : 0)"
				}

				initCommands = append(initCommands, fmt.Sprintf("Pointer buffer%s = new Memory(%d * %s.length);", param.ParamName, ElementBytes, MakeFirstLowerCase(param.ParamName)))
				initCommands = append(initCommands, fmt.Sprintf("for (int i = 0; i < %s.length; i++) {", MakeFirstLowerCase(param.ParamName)))
				initCommands = append(initCommands, fmt.Sprintf(indent + "buffer%s.set%s(%d * i, %s);", param.ParamName, MakeFirstUpperCase(ArrayType), ElementBytes, Value))
				initCommands = append(initCommands, "}")

				callFunctionParameters = callFunctionParameters + MakeFirstLowerCase(param.ParamName) + ".length, buffer" + param.ParamName
				initCallParameters = initCallParameters + MakeFirstLowerCase(param.ParamName) + ".length, buffer" + param.ParamName

			case "structarray":
				initCommands = append(initCommands, fmt.Sprintf("Pointer buffer%s = new Memory(%s.SIZE * %s.length);", param.ParamName, param.ParamClass, MakeFirstLowerCase(param.ParamName)))
				initCommands = append(initCommands, fmt.Sprintf("for (int i = 0; i < %s.length; i++) {", MakeFirstLowerCase(param.ParamName)))
				initCommands = append(initCommands, fmt.Sprintf(indent + "%s[i].writeToPointer(buffer%s, i * %s.SIZE);", MakeFirstLowerCase(param.ParamName), param.ParamName, param.ParamClass))
				initCommands = append(initCommands, "}")
				callFunctionParameters = callFunctionParameters + MakeFirstLowerCase(param.ParamName) + ".length, buffer" + param.ParamName
				initCallParameters = initCallParameters + MakeFirstLowerCase(param.ParamName) + ".length, buffer" + param.ParamName

			case "struct":
				initCommands = append(initCommands, fmt.Sprintf("Pointer buffer%s = new Memory(%s.SIZE);", param.ParamName, param.ParamClass))
				initCommands = append(initCommands, fmt.Sprintf("%s.writeToPointer(buffer%s, 0);", MakeFirstLowerCase(param.ParamName), param.ParamName))
				callFunctionParameters = callFunctionParameters + "buffer" + param.ParamName
				initCallParameters = initCallParameters + "buffer" + param.ParamName

			case "functiontype":
				callFunctionParameters = callFunctionParameters + MakeFirstLowerCase(param.ParamName)
				initCallParameters = initCallParameters + MakeFirstLowerCase(param.ParamName)

			case "class", "optionalclass":
				initCommands = append(initCommands, "Pointer " + MakeFirstLowerCase(param.ParamName) + "Handle = null;")
				initCommands = append(initCommands, fmt.Sprintf("if (%s != null) {", MakeFirstLowerCase(param.ParamName)))
				initCommands = append(initCommands, indent + MakeFirstLowerCase(param.ParamName) + "Handle = " + MakeFirstLowerCase(param.ParamName) + ".mHandle;")
				if (param.ParamType == "optionalclass") {

				} else {
					initCommands = append(initCommands, fmt.Sprintf("} else {"))
					initCommands = append(initCommands, indent + fmt.Sprintf("throw new %sException(%sException.%s_ERROR_INVALIDPARAM, \"%s is a null value.\");", NameSpace, NameSpace, strings.ToUpper(NameSpace), param.ParamName))
				}
				initCommands = append(initCommands, fmt.Sprintf("}"))
				callFunctionParameters = callFunctionParameters + MakeFirstLowerCase(param.ParamName) + "Handle"
				initCallParameters = initCallParameters + MakeFirstLowerCase(param.ParamName) + "Handle"

			default:
				return fmt.Errorf("invalid method parameter type \"%s\" for %s.%s (%s)", param.ParamType, ClassName, method.MethodName, param.ParamName)
			}

		case "out":

			switch param.ParamType {
			case "uint8", "uint16", "uint32", "uint64", "int8", "int16", "int32", "int64", "single", "double", "pointer":
				initCommands = append(initCommands, fmt.Sprintf("Pointer buffer%s = new Memory(%d);", param.ParamName, bytes))
				callFunctionParameters = callFunctionParameters + "buffer" + param.ParamName
				initCallParameters = initCallParameters + "buffer" + param.ParamName
				resultCommands = append(resultCommands, fmt.Sprintf("%s.value = buffer%s.get%s(0);", MakeFirstLowerCase(param.ParamName), param.ParamName, MakeFirstUpperCase(PlainParamTypeName)))

			case "string":
				initCommands = append(initCommands, "Pointer bytesNeeded"+param.ParamName+" = new Memory(4);")

				initCallParameters = initCallParameters + fmt.Sprintf("0, bytesNeeded%s, null", param.ParamName)

				postInitCommands = append(postInitCommands, fmt.Sprintf("int size%s = bytesNeeded%s.getInt(0);", param.ParamName, param.ParamName))
				postInitCommands = append(postInitCommands, fmt.Sprintf("Pointer buffer%s = new Memory(size%s);", param.ParamName, param.ParamName))

				callFunctionParameters = callFunctionParameters + fmt.Sprintf("size%s, bytesNeeded%s, buffer%s", param.ParamName, param.ParamName, param.ParamName)

				resultCommands = append(resultCommands, fmt.Sprintf("%s.value = new String(buffer%s.getByteArray(0, size%s - 1), StandardCharsets.UTF_8);", 
					MakeFirstLowerCase(param.ParamName), param.ParamName, param.ParamName))

				doInitCall = true

			case "enum":
				initCommands = append(initCommands, "Pointer buffer" + param.ParamName + " = new Memory(4);")

				callFunctionParameters = callFunctionParameters + "buffer" + param.ParamName
				initCallParameters = initCallParameters + "buffer" + param.ParamName
				resultCommands = append(resultCommands, fmt.Sprintf("%s.value = %sWrapper.EnumConversion.convertConstTo%s(buffer%s.getInt(0));", 
					MakeFirstLowerCase(param.ParamName), NameSpace, param.ParamClass, param.ParamName))

			case "bool":
				initCommands = append(initCommands, "Pointer buffer" + param.ParamName + " = new Memory(1);")				

				callFunctionParameters = callFunctionParameters + "buffer" + param.ParamName
				initCallParameters = initCallParameters + "buffer" + param.ParamName
				resultCommands = append(resultCommands, fmt.Sprintf("%s.value = buffer%s.getByte(0) != 0;", MakeFirstLowerCase(param.ParamName), param.ParamName))

			case "struct":
				initCommands = append(initCommands, fmt.Sprintf("Pointer buffer%s = new Memory(%s.SIZE);", param.ParamName, param.ParamClass))
				callFunctionParameters = callFunctionParameters + "buffer" + param.ParamName
				initCallParameters = initCallParameters + "buffer" + param.ParamName
				resultCommands = append(resultCommands, fmt.Sprintf("%s.readFromPointer(buffer%s, 0);", MakeFirstLowerCase(param.ParamName), param.ParamName))

			case "basicarray":
				ArrayType, ElementBytes, err := getJavaParameterType(param.ParamClass, "", "", "in", false)
				if err != nil {
					return err
				}

				initCommands = append(initCommands, fmt.Sprintf("Pointer countNeeded%s = new Memory(4);", param.ParamName))

				initCallParameters = initCallParameters + fmt.Sprintf("0, countNeeded%s, Pointer.NULL", param.ParamName)

				postInitCommands = append(postInitCommands, fmt.Sprintf("int count%s = countNeeded%s.getInt(0);", param.ParamName,  param.ParamName))
				postInitCommands = append(postInitCommands, fmt.Sprintf("Pointer buffer%s = new Memory(%d * count%s);", param.ParamName, ElementBytes, param.ParamName))

				callFunctionParameters = callFunctionParameters + fmt.Sprintf("count%s, countNeeded%s, buffer%s", param.ParamName, param.ParamName, param.ParamName)

				if param.ParamClass == "bool" {
					resultCommands = append(resultCommands, fmt.Sprintf("%s.value = new %s[count%s];", MakeFirstLowerCase(param.ParamName), ArrayType, param.ParamName))
					resultCommands = append(resultCommands, fmt.Sprintf("byte[] bytes%s = buffer%s.getByteArray(0, count%s);", param.ParamName, param.ParamName, param.ParamName))
					resultCommands = append(resultCommands, fmt.Sprintf("for (int i = 0; i < count%s; i++) {", param.ParamName))
					resultCommands = append(resultCommands, fmt.Sprintf(indent + "%s.value[i] = bytes%s[i] != (byte) 0;", MakeFirstLowerCase(param.ParamName), param.ParamName))
					resultCommands = append(resultCommands, "}")
				} else {
					resultCommands = append(resultCommands, fmt.Sprintf("%s.value = buffer%s.get%sArray(0, count%s);", MakeFirstLowerCase(param.ParamName), param.ParamName, MakeFirstUpperCase(ArrayType), param.ParamName))
				}

				doInitCall = true

			case "structarray":

				initCommands = append(initCommands, fmt.Sprintf("Pointer countNeeded%s = new Memory(4);", param.ParamName))

				initCallParameters = initCallParameters + fmt.Sprintf("0, countNeeded%s, null", param.ParamName)

				postInitCommands = append(postInitCommands, fmt.Sprintf("int count%s = countNeeded%s.getInt(0);", param.ParamName,  param.ParamName))
				postInitCommands = append(postInitCommands, fmt.Sprintf("Pointer buffer%s = new Memory(count%s * %s.SIZE);", param.ParamName, param.ParamName, param.ParamClass))

				callFunctionParameters = callFunctionParameters + fmt.Sprintf("count%s, countNeeded%s, buffer%s", param.ParamName, param.ParamName, param.ParamName)

				resultCommands = append(resultCommands, fmt.Sprintf("%s.value = new %s[count%s];", MakeFirstLowerCase(param.ParamName), param.ParamClass, param.ParamName))
				resultCommands = append(resultCommands, fmt.Sprintf("for (int i = 0; i < count%s; i++) {", param.ParamName))
				resultCommands = append(resultCommands, fmt.Sprintf(indent + "%s.value[i] = new %s();", MakeFirstLowerCase(param.ParamName), param.ParamClass))
				resultCommands = append(resultCommands, fmt.Sprintf(indent + "%s.value[i].readFromPointer(buffer%s, i * %s.SIZE);", MakeFirstLowerCase(param.ParamName), param.ParamName, param.ParamClass))
				resultCommands = append(resultCommands, "}")

				doInitCall = true

			case "class", "optionalclass":
				theNameSpace, theParamClass, _ := decomposeParamClassName(param.ParamClass)
				theWrapperInstance := wrapperInstanceName
				if len(theNameSpace) > 0 {
					theWrapperInstance = theWrapperInstance + "." + theNameSpace + "Wrapper"
				} else {
					theNameSpace = NameSpace
				}

				defineCommands = append(defineCommands, "H"+param.ParamName+": "+PlainParamTypeName+";")
				initCommands = append(initCommands, fmt.Sprintf("A%s := nil;", param.ParamName))
				initCommands = append(initCommands, "H"+param.ParamName+" := nil;")
				callFunctionParameters = callFunctionParameters + "H" + param.ParamName
				initCallParameters = initCallParameters + "nil"

				resultCommands = append(resultCommands, fmt.Sprintf("if Assigned(H%s) then", param.ParamName))
				resultCommands = append(resultCommands, fmt.Sprintf("  A%s := T%s%s.Create(%s, H%s);", param.ParamName, theNameSpace, theParamClass, theWrapperInstance, param.ParamName))

			default:
				return fmt.Errorf("invalid method parameter type \"%s\" for %s.%s(%s)", param.ParamType, ClassName, method.MethodName, param.ParamName)
			}

		case "return":


			switch param.ParamType {
			case "bool":
				initCommands = append(initCommands, "Pointer buffer" + param.ParamName + " = new Memory(1);")

				callFunctionParameters = callFunctionParameters + "buffer" + param.ParamName
				initCallParameters = initCallParameters + "buffer" + param.ParamName
				resultCommands = append(resultCommands, fmt.Sprintf("boolean %s = buffer%s.getByte(0) != 0;", MakeFirstLowerCase(param.ParamName), param.ParamName))
				returnStmt = MakeFirstLowerCase(param.ParamName) + ";"

			case "uint8", "uint16", "uint32", "uint64", "int8", "int16", "int32", "int64", "single", "double", "pointer":
				initCommands = append(initCommands, fmt.Sprintf("Pointer buffer%s = new Memory(%d);", param.ParamName, bytes))
				callFunctionParameters = callFunctionParameters + "buffer" + param.ParamName
				initCallParameters = initCallParameters + "buffer" + param.ParamName
				returnStmt = fmt.Sprintf("buffer%s.get%s(0);", param.ParamName, MakeFirstUpperCase(PlainParamTypeName))
				
			case "string":
				initCommands = append(initCommands, "Pointer bytesNeeded"+param.ParamName+" = new Memory(4);")

				initCallParameters = initCallParameters + fmt.Sprintf("0, bytesNeeded%s, null", param.ParamName)

				postInitCommands = append(postInitCommands, fmt.Sprintf("int size%s = bytesNeeded%s.getInt(0);", param.ParamName, param.ParamName))
				postInitCommands = append(postInitCommands, fmt.Sprintf("Pointer buffer%s = new Memory(size%s);", param.ParamName, param.ParamName))

				callFunctionParameters = callFunctionParameters + fmt.Sprintf("size%s, bytesNeeded%s, buffer%s", param.ParamName, param.ParamName, param.ParamName)

				resultCommands = append(resultCommands, fmt.Sprintf("String %s = new String(buffer%s.getByteArray(0, size%s - 1), StandardCharsets.UTF_8);", 
					MakeFirstLowerCase(param.ParamName), param.ParamName, param.ParamName))
				returnStmt = MakeFirstLowerCase(param.ParamName) + ";"

				doInitCall = true

			case "enum":
				initCommands = append(initCommands, "Pointer buffer" + param.ParamName + " = new Memory(4);")

				callFunctionParameters = callFunctionParameters + "buffer" + param.ParamName
				initCallParameters = initCallParameters + "buffer" + param.ParamName
				returnStmt = fmt.Sprintf("%sWrapper.EnumConversion.convertConstTo%s(buffer%s.getInt(0));", NameSpace, param.ParamClass, param.ParamName)

			case "struct":
				initCommands = append(initCommands, fmt.Sprintf("Pointer buffer%s = new Memory(%s.SIZE);", param.ParamName, param.ParamClass))
				callFunctionParameters = callFunctionParameters + "buffer" + param.ParamName
				initCallParameters = initCallParameters + "buffer" + param.ParamName
				resultCommands = append(resultCommands, fmt.Sprintf("%s %s = new %s();", param.ParamClass, MakeFirstLowerCase(param.ParamName), param.ParamClass))
				resultCommands = append(resultCommands, fmt.Sprintf("%s.readFromPointer(buffer%s, 0);", MakeFirstLowerCase(param.ParamName), param.ParamName))
				returnStmt = MakeFirstLowerCase(param.ParamName) + ";"

			case "basicarray":
				ArrayType, ElementBytes, err := getJavaParameterType(param.ParamClass, "", "", "in", false)
				if err != nil {
					return err
				}

				initCommands = append(initCommands, fmt.Sprintf("Pointer countNeeded%s = new Memory(4);", param.ParamName))

				initCallParameters = initCallParameters + fmt.Sprintf("0, countNeeded%s, Pointer.NULL", param.ParamName)

				postInitCommands = append(postInitCommands, fmt.Sprintf("int count%s = countNeeded%s.getInt(0);", param.ParamName,  param.ParamName))
				postInitCommands = append(postInitCommands, fmt.Sprintf("Pointer buffer%s = new Memory(%d * count%s);", param.ParamName, ElementBytes, param.ParamName))

				callFunctionParameters = callFunctionParameters + fmt.Sprintf("count%s, countNeeded%s, buffer%s", param.ParamName, param.ParamName, param.ParamName)

				if param.ParamClass == "bool" {
					resultCommands = append(resultCommands, fmt.Sprintf("%s[] %s = new %s[count%s];", 
						ArrayType, MakeFirstLowerCase(param.ParamName), ArrayType, param.ParamName))
					resultCommands = append(resultCommands, fmt.Sprintf("byte[] bytes%s = buffer%s.getByteArray(0, count%s);", param.ParamName, param.ParamName, param.ParamName))
					resultCommands = append(resultCommands, fmt.Sprintf("for (int i = 0; i < count%s; i++) {", param.ParamName))
					resultCommands = append(resultCommands, fmt.Sprintf(indent + "%s[i] = bytes%s[i] != (byte) 0;", MakeFirstLowerCase(param.ParamName), param.ParamName))
					resultCommands = append(resultCommands, "}")
				} else {
					resultCommands = append(resultCommands, fmt.Sprintf("%s[] %s = buffer%s.get%sArray(0, count%s);", 
						ArrayType, MakeFirstLowerCase(param.ParamName), param.ParamName, MakeFirstUpperCase(ArrayType), param.ParamName))
				}

				returnStmt = MakeFirstLowerCase(param.ParamName) + ";"

				doInitCall = true

			case "structarray":
				initCommands = append(initCommands, fmt.Sprintf("Pointer countNeeded%s = new Memory(4);", param.ParamName))

				initCallParameters = initCallParameters + fmt.Sprintf("0, countNeeded%s, null", param.ParamName)

				postInitCommands = append(postInitCommands, fmt.Sprintf("int count%s = countNeeded%s.getInt(0);", param.ParamName,  param.ParamName))
				postInitCommands = append(postInitCommands, fmt.Sprintf("Pointer buffer%s = new Memory(count%s * %s.SIZE);", param.ParamName, param.ParamName, param.ParamClass))

				callFunctionParameters = callFunctionParameters + fmt.Sprintf("count%s, countNeeded%s, buffer%s", param.ParamName, param.ParamName, param.ParamName)

				resultCommands = append(resultCommands, fmt.Sprintf("%s[] %s = new %s[count%s];", param.ParamClass, MakeFirstLowerCase(param.ParamName), param.ParamClass, param.ParamName))
				resultCommands = append(resultCommands, fmt.Sprintf("for (int i = 0; i < count%s; i++) {", param.ParamName))
				resultCommands = append(resultCommands, fmt.Sprintf(indent + "%s[i] = new %s();", MakeFirstLowerCase(param.ParamName), param.ParamClass))
				resultCommands = append(resultCommands, fmt.Sprintf(indent + "%s[i].readFromPointer(buffer%s, i * %s.SIZE);", MakeFirstLowerCase(param.ParamName), param.ParamName, param.ParamClass))
				resultCommands = append(resultCommands, "}")
				returnStmt = MakeFirstLowerCase(param.ParamName) + ";"

				doInitCall = true

			case "class", "optionalclass":
				theNameSpace, theParamClass, _ := decomposeParamClassName(param.ParamClass)
				theWrapperInstance := wrapperInstanceName
				if len(theNameSpace) > 0 {
					theWrapperInstance = theWrapperInstance + "." + theNameSpace + "Wrapper"
				} else {
					theNameSpace = NameSpace
				}
				initCommands = append(initCommands, "Pointer buffer" + param.ParamName + " = new Memory(8);")
				callFunctionParameters = callFunctionParameters + "buffer" + param.ParamName
				resultCommands = append(resultCommands, fmt.Sprintf("Pointer value%s = buffer%s.getPointer(0);", param.ParamName, param.ParamName))
				resultCommands = append(resultCommands, fmt.Sprintf("%s %s = null;", theParamClass, MakeFirstLowerCase(param.ParamName)))
				resultCommands = append(resultCommands, fmt.Sprintf("if (value%s == Pointer.NULL) {", param.ParamName))
				if param.ParamType == "class" {
					resultCommands = append(resultCommands, fmt.Sprintf(indent + "throw new %sException(%sException.%s_ERROR_NORESULTAVAILABLE, \"%s was a null pointer\");", 
						NameSpace, NameSpace, strings.ToUpper(NameSpace), param.ParamName))
				} else {
					resultCommands = append(resultCommands, fmt.Sprintf("%s = null;", theParamClass, MakeFirstLowerCase(param.ParamName)))
				}
				resultCommands = append(resultCommands, fmt.Sprintf("} else {"))
				resultCommands = append(resultCommands, indent + fmt.Sprintf("%s = new %s(%s, value%s);", MakeFirstLowerCase(param.ParamName), theParamClass, theWrapperInstance, param.ParamName))
				resultCommands = append(resultCommands, fmt.Sprintf("}"))
				returnStmt = MakeFirstLowerCase(param.ParamName) + ";"

			default:
				return fmt.Errorf("invalid method parameter type \"%s\" for %s.%s (%s)", param.ParamType, ClassName, method.MethodName, param.ParamName)
			}

		}
	}

	w.Writeln(indent + " * @throws %sException", NameSpace)
	w.Writeln(indent + " */")
	w.Writeln(indent + "public %s %s(%s) throws %sException {", returnType, MakeFirstLowerCase(method.MethodName), parameters, NameSpace)

	if len(defineCommands) > 0 {
		w.Writelns(indent + indent, defineCommands)
	}

	w.Writelns(indent + indent, initCommands)

	if doInitCall {
		w.Writeln("    %scheckError(%s, %s%s(%s));", wrapperCallPrefix, errorInstanceHandle, wrapperCallPrefix, callFunctionName, initCallParameters)
	}

	w.Writelns("    ", postInitCommands)

	w.Writeln("    %scheckError(%s, %s%s(%s));", wrapperCallPrefix, errorInstanceHandle, wrapperCallPrefix, callFunctionName, callFunctionParameters)

	w.Writelns(indent + indent, resultCommands)

	if len(returnStmt) > 0 {
		w.Writeln(indent + indent + "return " + returnStmt)
	}

	w.Writeln(indent + "}")
	w.Writeln("")

	return nil
}

func buildJavaStruct(component ComponentDefinition, w LanguageWriter, indent string, structinfo ComponentDefinitionStruct) error {

	w.Writeln("package %s;", strings.ToLower(component.NameSpace))
	w.Writeln("")
	w.Writeln("import com.sun.jna.Memory;")
	w.Writeln("import com.sun.jna.Pointer;")
	w.Writeln("")
	w.Writeln("import java.util.Arrays;")
	w.Writeln("import java.util.List;")
	w.Writeln("")
	w.Writeln("public class %s {", structinfo.Name)
	w.Writeln("")
	w.Writeln(indent + "public static class ArrayOut { public %s[] value;} ", structinfo.Name)
	w.Writeln("")
	byteSum := 0

	for j := 0; j < len(structinfo.Members); j++ {
		element := structinfo.Members[j]
		arrayprefix := ""
		arraysuffix := ""
		if element.Rows > 0 {
			if element.Columns > 0 {
				arrayprefix = fmt.Sprintf("[][]")
				arraysuffix = fmt.Sprintf("[%d][%d]", element.Columns-1, element.Rows-1)
			} else {
				arrayprefix = fmt.Sprintf("[]")
				arraysuffix = fmt.Sprintf("[%d]", element.Rows-1)
			}
		}

		fieldType, bytes, err := getJavaParameterType(element.Type, component.NameSpace, "", "in", true)
		if err != nil {
			return err
		}

		if element.Rows > 0 {
			if element.Columns > 0 {
				arrayprefix = fmt.Sprintf("[][]")
				arraysuffix = fmt.Sprintf("[%d][%d]", element.Columns, element.Rows)
				byteSum = byteSum + bytes * element.Columns * element.Rows;
			} else {
				arrayprefix = fmt.Sprintf("[]")
				arraysuffix = fmt.Sprintf("[%d]", element.Rows)
				byteSum = byteSum + bytes * element.Rows;
			}
			w.Writeln(indent + "public %s%s %s = new %s%s;", fieldType, arrayprefix, element.Name, fieldType, arraysuffix)
		} else {
			byteSum = byteSum + bytes;
			w.Writeln(indent + "public %s %s;", fieldType, element.Name)
		}
		w.Writeln("")
	}
	w.Writeln(indent + "public static final int SIZE = %d;", byteSum);
	w.Writeln("")

	// Write memory reader
	byteSum = 0
	w.Writeln(indent + "public void readFromPointer(Pointer p, long offset) {");
	for j := 0; j < len(structinfo.Members); j++ {
		element := structinfo.Members[j]
		boolSuffix := ""

		fieldType, bytes, err := getJavaParameterType(element.Type, component.NameSpace, "", "in", true)
		if err != nil {
			return err
		}
		if element.Type == "bool" {
			boolSuffix = " != 0"
			fieldType = "byte"
		}

		if element.Rows > 0 {
			for k := 0; k < element.Rows; k++ {
				if element.Columns > 0 {
					for l := 0; l < element.Columns; l++ {
						w.Writeln(indent + indent + "%s[%d][%d] = p.get%s(offset + %d)%s;", element.Name, k, l, MakeFirstUpperCase(fieldType), byteSum, boolSuffix)
						byteSum = byteSum + bytes;
					}
				} else {
					w.Writeln(indent + indent + "%s[%d] = p.get%s(offset + %d)%s;", element.Name, k, MakeFirstUpperCase(fieldType), byteSum, boolSuffix)
					byteSum = byteSum + bytes;
				}
			}
		} else {
			w.Writeln(indent + indent + "%s = p.get%s(offset + %d)%s;", element.Name, MakeFirstUpperCase(fieldType), byteSum, boolSuffix)
			byteSum = byteSum + bytes;
		}
	}
	w.Writeln(indent + "}");
	w.Writeln("")

	// Write memory writer
	byteSum = 0
	w.Writeln(indent + "public void writeToPointer(Pointer p, long offset) {");
	for j := 0; j < len(structinfo.Members); j++ {
		element := structinfo.Members[j]
		value := element.Name
		fieldType, bytes, err := getJavaParameterType(element.Type, component.NameSpace, "", "in", true)
		if err != nil {
			return err
		}
		if element.Type == "bool" {
			value = "(byte) (" + element.Name + " ? 1 : 0)"
			fieldType = "byte"
		}

		if element.Rows > 0 {
			for k := 0; k < element.Rows; k++ {
				if element.Columns > 0 {
					for l := 0; l < element.Columns; l++ {
						w.Writeln(indent + indent + "p.set%s(offset + %d, %s[%d][%d]);", MakeFirstUpperCase(fieldType), byteSum, value, k, l, )
						byteSum = byteSum + bytes;
					}
				} else {
					w.Writeln(indent + indent + "p.set%s(offset + %d, %s[%d]);", MakeFirstUpperCase(fieldType), byteSum, value, k, )
					byteSum = byteSum + bytes;
				}
			}
		} else {
			w.Writeln(indent + indent + "p.set%s(offset + %d, %s);", MakeFirstUpperCase(fieldType), byteSum, value)
			byteSum = byteSum + bytes;
		}
	}
	w.Writeln(indent + "}");
	w.Writeln("")

	w.Writeln("}")
	w.Writeln("")
	return nil
}

func buildJavaWrapper(component ComponentDefinition, w LanguageWriter, indent string) error {

	NameSpace := component.NameSpace
	JavaWrapperName := NameSpace + "Wrapper";

	w.Writeln("package %s;", strings.ToLower(component.NameSpace))
	w.Writeln("")
	w.Writeln("import com.sun.jna.Library;")
	w.Writeln("import com.sun.jna.Memory;")
	w.Writeln("import com.sun.jna.Native;")
	w.Writeln("import com.sun.jna.Pointer;")
	w.Writeln("import com.sun.jna.Callback;")
	w.Writeln("")
	w.Writeln("import java.nio.charset.StandardCharsets;")

	w.Writeln("")
	w.Writeln("public class " + JavaWrapperName + " {")
	w.Writeln("")

	// Write enums and conversion functions
	for i := 0; i < len(component.Enums); i++ {
		enum := component.Enums[i]
		for j := 0; j < len(enum.Options); j++ {
				w.Writeln(indent + "public static final int %s_%s = %d;", strings.ToUpper(enum.Name), strings.ToUpper(enum.Options[j].Name), enum.Options[j].Value)
		}
		w.Writeln("")
		w.Writeln(indent + "public enum %s {", enum.Name)
		for j := 0; j < len(enum.Options); j++ {
			if j < len(enum.Options) - 1 {
				w.Writeln(indent + indent + "e" + enum.Options[j].Name + ",")
			} else {
				w.Writeln(indent + indent + "e" + enum.Options[j].Name)
			}
		}
		w.Writeln(indent + "}")
		w.Writeln("")
	}
	if (len(component.Errors.Errors) > 0) {
		w.Writeln(indent + "public static class EnumConversion {")
		for i := 0; i < len(component.Enums); i++ {
			enum := component.Enums[i]
			w.Writeln(indent + indent + "public static int convert%sToConst (%s value) throws %sException {", enum.Name, enum.Name, NameSpace)
			w.Writeln(indent + indent + indent + "switch (value) {")
			for j := 0; j < len(enum.Options); j++ {
				w.Writeln(indent + indent + indent + indent + "case e%s: return %s_%s;", enum.Options[j].Name, strings.ToUpper(enum.Name), strings.ToUpper(enum.Options[j].Name))
			}
				w.Writeln(indent + indent + indent + indent + "default: throw new %sException(%sException.%s_ERROR_INVALIDPARAM, \"Unknown enum value : \" + value);", NameSpace, NameSpace, strings.ToUpper(NameSpace))
			w.Writeln(indent + indent + indent + "}")
			w.Writeln(indent + indent + "}")
			w.Writeln("")
			w.Writeln(indent + indent + "public static %s convertConstTo%s (int value) throws %sException {", enum.Name, enum.Name, NameSpace)
			w.Writeln(indent + indent + indent + "switch (value) {")
			for j := 0; j < len(enum.Options); j++ {
				w.Writeln(indent + indent + indent + indent + "case %s_%s: return %s.e%s;", strings.ToUpper(enum.Name), strings.ToUpper(enum.Options[j].Name), enum.Name, enum.Options[j].Name)
			}
				w.Writeln(indent + indent + indent + indent + "default: throw new %sException(%sException.%s_ERROR_INVALIDPARAM, \"Unknown enum const : \" + value);", NameSpace, NameSpace, strings.ToUpper(NameSpace))
			w.Writeln(indent + indent + indent + "}")
			w.Writeln(indent + indent + "}")
			w.Writeln("")
		}
		w.Writeln(indent + "}")
		w.Writeln("")
	}

	// Write callback functions
	for j:=0; j<len(component.Functions); j++ {
		function := component.Functions[j]
		w.Writeln(indent + "public interface %s extends Callback {", function.FunctionName)
		w.Writeln("")
		nativeParams := ""
		for i := 0; i < len(function.Params); i++ {
			param := function.Params[i]

			javaParams, err := generatePlainJavaParameter(param, "", function.FunctionName, NameSpace)
			if err != nil {
				return err
			}

			for _, javaParam := range javaParams {
				if nativeParams != "" {
					nativeParams = nativeParams + ", "
				}
				nativeParams = nativeParams + javaParam.ParamConvention + javaParam.ParamType + " " + javaParam.ParamName
			}
		}
		w.Writeln(indent + indent + "void %s (%s);", MakeFirstLowerCase(function.FunctionName), nativeParams)
		w.Writeln("")
		w.Writeln(indent + "}")
		w.Writeln("")
	}

	// Write out holding classes
	primitives := []string{ "byte", "char", "short", "int", "long", "boolean", "float", "double", "String" }
	for i := 0; i < len(primitives); i++ {
		w.Writeln(indent + "public static class %sOut { public %s value; }", MakeFirstUpperCase(primitives[i]), primitives[i])
		w.Writeln("")
		w.Writeln(indent + "public static class %sArrayOut { public %s value[]; }", MakeFirstUpperCase(primitives[i]), primitives[i])
		w.Writeln("")
	}
	for i := 0; i < len(component.Enums); i++ {
		name := component.Enums[i].Name
		w.Writeln(indent + "public static class %sOut { public %s value; }", MakeFirstUpperCase(name), name)
		w.Writeln(indent + "public static class %sArrayOut { public %s value[]; }", MakeFirstUpperCase(name), name)
		w.Writeln("")
	}

	// Write wrapper interface
	w.Writeln(indent + "public interface I" + NameSpace + " extends Library {")
	spacing := indent + indent
	for j:=0; j<len(component.Global.Methods); j++ {
		method := component.Global.Methods[j]
		parameter, err := generateParametersForMethod(method, "", NameSpace, true)
		if err != nil {
			return err
		}
		w.Writeln("")
		w.Writeln(spacing + "/**")
		w.Writeln(spacing + "* %s", method.MethodDescription)
		w.Writeln(spacing + "* @return error code or 0 (success)")
		w.Writeln(spacing + "*/")
		w.Writeln(spacing + "int %s_%s (%s);", strings.ToLower(NameSpace), strings.ToLower(method.MethodName), parameter)
	}
	for i := 0; i < len(component.Classes); i++ {
		class := component.Classes[i]
		for j:=0; j<len(class.Methods); j++ {
			method := class.Methods[j]
			parameter, err := generateParametersForMethod(method, class.ClassName, NameSpace, false)
			if err != nil {
				return err
			}
			w.Writeln("")
			w.Writeln(spacing + "/**")
			w.Writeln(spacing + "* %s", method.MethodDescription)
			w.Writeln(spacing + "* @return error code or 0 (success)")
			w.Writeln(spacing + "*/")
			w.Writeln(spacing + "int %s_%s_%s (%s);", strings.ToLower(NameSpace), strings.ToLower(class.ClassName), strings.ToLower(method.MethodName), parameter)
		}
	}
	w.Writeln(indent + "}")
	w.Writeln("")

	// Write wrapper member/constructor/checkError
	w.Writeln(indent + "protected I" + NameSpace + " mInterface;")
	w.Writeln("")
	w.Writeln(indent + "public " + JavaWrapperName + "(String libraryPath) {")
	w.Writeln(indent + indent + "mInterface = Native.load(libraryPath, I" + NameSpace + ".class);")
	w.Writeln(indent + "}")
	w.Writeln("")
	w.Writeln(indent + "public I" + NameSpace + " getInterface() {")
	w.Writeln(indent + indent + "return mInterface;")
	w.Writeln(indent + "}")
	w.Writeln("")
	w.Writeln(indent + "protected void checkError(%s instance, int errorCode) throws %sException {", component.Global.BaseClassName, NameSpace)
	w.Writeln(indent + indent + "if (instance != null && instance.mWrapper != this) {")
	w.Writeln(indent + indent + indent + "throw new %sException(%sException.%s_ERROR_INVALIDCAST, \"invalid wrapper call\");", NameSpace, NameSpace, strings.ToUpper(NameSpace))
	w.Writeln(indent + indent + "}")
	w.Writeln(indent + indent + "if (errorCode != %sException.%s_SUCCESS) {", NameSpace, strings.ToUpper(NameSpace))
	w.Writeln(indent + indent + indent + "StringOut errorMessage = new " + NameSpace + "Wrapper.StringOut();")
	w.Writeln(indent + indent + indent + "if (instance != null) {")
	w.Writeln(indent + indent + indent + indent + "%s(instance, errorMessage);", MakeFirstLowerCase(component.Global.ErrorMethod))
	w.Writeln(indent + indent + indent + "}")
	w.Writeln(indent + indent + indent + "throw new %sException(errorCode, errorMessage.value);", NameSpace)
	w.Writeln(indent + indent + "}")
	w.Writeln(indent + "}")
	w.Writeln("")

	// Write wrapper methods
	for j := 0; j < len(component.Global.Methods); j++ {
		method := component.Global.Methods[j]

		err := writeJavaClassMethodImplementation(method, w, NameSpace, "", indent, true)
		if err != nil {
			return err
		}
	}

	w.Writeln("}")
	w.Writeln("")

	return nil
}

func generateParametersForMethod(method ComponentDefinitionMethod, ClassName string, NameSpace string, isGlobal bool) (string, error) {
	parameters := "";
	if isGlobal {

	} else {

		parameters = fmt.Sprintf("Pointer %s", MakeFirstLowerCase(ClassName))
	}

	for k := 0; k < len(method.Params); k++ {
		param := method.Params[k]

		javaParams, err := generatePlainJavaParameter(param, ClassName, method.MethodName, NameSpace)
		if err != nil {
			return "", err
		}

		for _, javaParam := range javaParams {
			if parameters != "" {
				parameters = parameters + ", "
			}
			parameters = parameters + javaParam.ParamConvention + javaParam.ParamType + " " + javaParam.ParamName
		}

	}
	return parameters, nil;
}

func generatePlainJavaParameter(param ComponentDefinitionParam, className string, methodName string, NameSpace string) ([]javaParameter, error) {
	cParams := make([]javaParameter, 1)
	cParamTypeName, _, err := getJavaParameterType(param.ParamType, NameSpace, param.ParamClass, param.ParamPass, true)
	if err != nil {
		return nil, err
	}

	switch param.ParamPass {
	case "in":
		switch param.ParamType {
		case "uint8", "uint16", "uint32", "uint64", "int8", "int16", "int32", "int64", "bool", "single", "double", "pointer", "string", "enum":
			cParams[0].ParamType = cParamTypeName
			cParams[0].ParamName = MakeFirstLowerCase(param.ParamName)
			cParams[0].ParamComment = fmt.Sprintf("* @param[in] %s - %s", cParams[0].ParamName, param.ParamDescription)
			cParams[0].ParamConvention = ""
			cParams[0].ParamTypeNoConvention = cParams[0].ParamType

		case "struct":
			cParams[0].ParamType = cParamTypeName
			cParams[0].ParamName = MakeFirstLowerCase(param.ParamName)
			cParams[0].ParamComment = fmt.Sprintf("* @param[in] %s - %s", cParams[0].ParamName, param.ParamDescription)
			cParams[0].ParamConvention = ""
			cParams[0].ParamTypeNoConvention = cParams[0].ParamType

		case "basicarray", "structarray":
			cParams = make([]javaParameter, 2)
			cParams[0].ParamType = "int"
			cParams[0].ParamName = MakeFirstLowerCase(param.ParamName) + "Size"
			cParams[0].ParamComment = fmt.Sprintf("* @param[in] %s - Number of elements in buffer", cParams[0].ParamName)
			cParams[0].ParamConvention = ""
			cParams[0].ParamTypeNoConvention = cParams[0].ParamType

			cParams[1].ParamType = "Pointer"
			cParams[1].ParamName = MakeFirstLowerCase(param.ParamName) + "Buffer"
			cParams[1].ParamComment = fmt.Sprintf("* @param[in] %s - %s buffer of %s", cParams[1].ParamName, param.ParamClass, param.ParamDescription)
			cParams[1].ParamConvention = ""
			cParams[1].ParamTypeNoConvention = cParams[1].ParamType

		case "functiontype":
			cParams[0].ParamType = cParamTypeName
			cParams[0].ParamName = MakeFirstLowerCase(param.ParamName)
			cParams[0].ParamComment = fmt.Sprintf("* @param[in] %s - %s", cParams[0].ParamName, param.ParamDescription)
			cParams[0].ParamConvention = ""
			cParams[0].ParamTypeNoConvention = cParams[0].ParamType

		case "class", "optionalclass":
			cParams[0].ParamType = cParamTypeName
			cParams[0].ParamName = MakeFirstLowerCase(param.ParamName)
			cParams[0].ParamComment = fmt.Sprintf("* @param[in] %s - %s", cParams[0].ParamName, param.ParamDescription)
			cParams[0].ParamConvention = ""
			cParams[0].ParamTypeNoConvention = cParams[0].ParamType

		default:
			return nil, fmt.Errorf("invalid method parameter type \"%s\" for %s.%s(%s)", param.ParamType, className, methodName, param.ParamName)
		}

	case "out", "return":

		switch param.ParamType {

		case "uint8", "uint16", "uint32", "uint64", "int8", "int16", "int32", "int64", "bool", "single", "double", "pointer", "enum":
			cParams[0].ParamType = "Pointer"
			cParams[0].ParamName = MakeFirstLowerCase(param.ParamName)
			cParams[0].ParamComment = fmt.Sprintf("* @param[out] %s - %s", cParams[0].ParamName, param.ParamDescription)
			cParams[0].ParamConvention = ""
			cParams[0].ParamTypeNoConvention = cParams[0].ParamType

		case "struct":
			cParams[0].ParamType = cParamTypeName
			cParams[0].ParamName = MakeFirstLowerCase(param.ParamName)
			cParams[0].ParamComment = fmt.Sprintf("* @param[out] %s - %s", cParams[0].ParamName, param.ParamDescription)
			cParams[0].ParamConvention = ""
			cParams[0].ParamTypeNoConvention = cParams[0].ParamType

		case "basicarray":
			cParams = make([]javaParameter, 3)
			cParams[0].ParamType = "int"
			cParams[0].ParamName = MakeFirstLowerCase(param.ParamName) + "Size"
			cParams[0].ParamComment = fmt.Sprintf("* @param[in] %s - Number of elements in buffer", cParams[0].ParamName)
			cParams[0].ParamConvention = ""
			cParams[0].ParamTypeNoConvention = cParams[0].ParamType

			cParams[1].ParamType = "Pointer"
			cParams[1].ParamName = MakeFirstLowerCase(param.ParamName) + "NeededSize"
			cParams[1].ParamComment = fmt.Sprintf("* @param[out] %s - will be filled with the count of the written elements, or needed buffer size.", cParams[1].ParamName)
			cParams[1].ParamConvention = ""
			cParams[1].ParamTypeNoConvention = cParams[1].ParamType

			cParams[2].ParamType = "Pointer"
			cParams[2].ParamName = MakeFirstLowerCase(param.ParamName) + "Buffer"
			cParams[2].ParamComment = fmt.Sprintf("* @param[out] %s - %s buffer of %s", cParams[2].ParamName, param.ParamClass, param.ParamDescription)
			cParams[2].ParamConvention = ""
			cParams[2].ParamTypeNoConvention = cParams[2].ParamType

		case "structarray":
			cParams = make([]javaParameter, 3)
			cParams[0].ParamType = "int"
			cParams[0].ParamName = MakeFirstLowerCase(param.ParamName) + "Size"
			cParams[0].ParamComment = fmt.Sprintf("* @param[in] %s - Number of elements in buffer", cParams[0].ParamName)
			cParams[0].ParamConvention = ""
			cParams[0].ParamTypeNoConvention = cParams[0].ParamType

			cParams[1].ParamType = "Pointer"
			cParams[1].ParamName = MakeFirstLowerCase(param.ParamName) + "NeededSize"
			cParams[1].ParamComment = fmt.Sprintf("* @param[out] %s - will be filled with the count of the written elements, or needed buffer size.", cParams[1].ParamName)
			cParams[1].ParamConvention = ""
			cParams[1].ParamTypeNoConvention = cParams[1].ParamType

			cParams[2].ParamType = "Pointer"
			cParams[2].ParamName = MakeFirstLowerCase(param.ParamName) + "Buffer"
			cParams[2].ParamComment = fmt.Sprintf("* @param[out] %s - %s buffer of %s", cParams[2].ParamName, param.ParamClass, param.ParamDescription)
			cParams[2].ParamConvention = ""
			cParams[2].ParamTypeNoConvention = cParams[2].ParamType

		case "string":
			cParams = make([]javaParameter, 3)
			cParams[0].ParamType = "int"
			cParams[0].ParamName = MakeFirstLowerCase(param.ParamName) + "BufferSize"
			cParams[0].ParamComment = fmt.Sprintf("* @param[in] %s - size of the buffer (including trailing 0)", cParams[0].ParamName)
			cParams[0].ParamConvention = ""
			cParams[0].ParamTypeNoConvention = cParams[0].ParamType

			cParams[1].ParamType = "Pointer"
			cParams[1].ParamName = MakeFirstLowerCase(param.ParamName) + "NeededBuffer"
			cParams[1].ParamComment = fmt.Sprintf("* @param[out] %s - will be filled with the count of the written bytes, or needed buffer size.", cParams[1].ParamName)
			cParams[1].ParamConvention = ""
			cParams[1].ParamTypeNoConvention = cParams[1].ParamType

			cParams[2].ParamType = "Pointer"
			cParams[2].ParamName = MakeFirstLowerCase(param.ParamName) + "Buffer"
			cParams[2].ParamComment = fmt.Sprintf("* @param[out] %s - %s buffer of %s, may be NULL", cParams[2].ParamName, param.ParamClass, param.ParamDescription)
			cParams[2].ParamConvention = ""
			cParams[2].ParamTypeNoConvention = cParams[2].ParamType

		case "class", "optionalclass":
			cParams[0].ParamType = "Pointer"
			cParams[0].ParamName = MakeFirstLowerCase(param.ParamName)
			cParams[0].ParamComment = fmt.Sprintf("* @param[out] %s - %s", cParams[0].ParamName, param.ParamDescription)
			cParams[0].ParamConvention = ""
			cParams[0].ParamTypeNoConvention = cParams[0].ParamType

		default:
			return nil, fmt.Errorf("invalid method parameter type \"%s\" for %s.%s(%s)", param.ParamType, className, methodName, param.ParamName)
		}


	default:
		return nil, fmt.Errorf("invalid method parameter passing \"%s\" for %s.%s(%s)", param.ParamPass, className, methodName, param.ParamName)
	}

	return cParams, nil
}

func getJavaParameterType(ParamTypeName string, NameSpace string, ParamClass string, ParamPass string, isPlain bool) (string, int, error) {
	JavaParamTypeName := ""
	Bytes := 0;
	switch ParamTypeName {
	case "uint8":
		JavaParamTypeName = "char"
		Bytes = 1;

	case "uint16", "int16":
		JavaParamTypeName = "short"
		Bytes = 2;

	case "uint32", "int32":
		JavaParamTypeName = "int"
		Bytes = 4;

	case "uint64", "int64":
		JavaParamTypeName = "long"
		Bytes = 8;

	case "int8":
		JavaParamTypeName = "byte"
		Bytes = 1;

	case "bool":
		JavaParamTypeName = "boolean"
		Bytes = 1;

	case "single":
		JavaParamTypeName = "float"
		Bytes = 4;

	case "double":
		JavaParamTypeName = "double"
		Bytes = 8;

	case "pointer":
		JavaParamTypeName = "Pointer"
		Bytes = 8;

	case "string":
		JavaParamTypeName = "String"

	case "enum":
		if isPlain {
			JavaParamTypeName = "int"
		} else {
			JavaParamTypeName = NameSpace + "Wrapper." + ParamClass
		}
		Bytes = 4;

	case "functiontype":
		JavaParamTypeName = NameSpace + "Wrapper." + ParamClass

	case "struct":
		if isPlain {
			JavaParamTypeName = "Pointer"
		} else {
			JavaParamTypeName = ParamClass
		}


	case "basicarray":
		basicTypeName, SubBytes, err := getJavaParameterType(ParamClass, NameSpace, "", "in", isPlain)
		if err != nil {
			return "", 0, err
		}
		Bytes = SubBytes
		if isPlain {
			JavaParamTypeName = "Pointer"
		} else {
			if ParamPass == "out" {
				JavaParamTypeName = fmt.Sprintf("%sWrapper.%sArrayOut", NameSpace, MakeFirstUpperCase(basicTypeName))
			} else {
				JavaParamTypeName = fmt.Sprintf("%s[]", basicTypeName)
			}
		}

	case "structarray":
		if isPlain {
			JavaParamTypeName = "Pointer"
		} else {
			if ParamPass == "out" {
				JavaParamTypeName = fmt.Sprintf("%s.ArrayOut", ParamClass)
			} else {
				JavaParamTypeName = ParamClass + "[]"
			}
		}

	case "class", "optionalclass":
		if isPlain {
			JavaParamTypeName = fmt.Sprintf("Pointer")
		} else {
			SubNameSpace, SubClassName, _ := decomposeParamClassName(ParamClass)
			if len(SubNameSpace) > 0 {
				JavaParamTypeName = fmt.Sprintf("%s", SubClassName)
			} else {
				JavaParamTypeName = fmt.Sprintf("%s", ParamClass)
			}
		}

	default:
		return "", Bytes, fmt.Errorf("invalid parameter type \"%s\" for Java parameter", ParamTypeName)
	}

	if ParamPass == "out" {
		switch ParamTypeName {
			case "uint8", "uint16", "int16", "uint32", "int32", "uint64", "int64", "int8", "bool", "single", "double", "pointer", "string":
					JavaParamTypeName = NameSpace + "Wrapper." + MakeFirstUpperCase(JavaParamTypeName) + "Out"
			case "enum":
					JavaParamTypeName = NameSpace + "Wrapper." + ParamClass + "Out"
		}
	}

	if isPlain {
		if ParamTypeName == "string" {
			JavaParamTypeName = "Pointer"
		}
		if ParamTypeName == "enum" {
			JavaParamTypeName = "int"
		}
	}

	return JavaParamTypeName, Bytes, nil
}

func MakeFirstLowerCase(s string) string {
    
    if len(s) < 2 {
        return strings.ToLower(s)
    }
    
    bts := []byte(s)
    
    lc := bytes.ToLower([]byte{bts[0]})
    rest := bts[1:]
    
    return string(bytes.Join([][]byte{lc, rest}, nil))   
}

func MakeFirstUpperCase(s string) string {
    
    if len(s) < 2 {
        return strings.ToLower(s)
    }
    
    bts := []byte(s)
    
    lc := bytes.ToUpper([]byte{bts[0]})
    rest := bts[1:]
    
    return string(bytes.Join([][]byte{lc, rest}, nil))   
}
