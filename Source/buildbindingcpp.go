/*++

Copyright (C) 2018 Autodesk Inc. (Original Author)

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

--*/

//////////////////////////////////////////////////////////////////////////////////////////////////////
// buildbindingcpp.go
// functions to generate C++-bindings of a library's API in form of automatically implemented C++-
// wrapper classes.
//////////////////////////////////////////////////////////////////////////////////////////////////////

package main

import (
	"fmt"
	"io"
	"log"
	"os"
	"path"
	"strings"
)

// BuildBindingCPP builds C++-bindings of a library's API in form of automatically implemented C++-
// wrapper classes.
func BuildBindingCPP(component ComponentDefinition, outputFolder string) error {
	namespace := component.NameSpace;
	libraryname := component.LibraryName;
	baseName := component.BaseName;

	CppHeaderName := path.Join(outputFolder, baseName+".hpp");
	log.Printf("Creating \"%s\"", CppHeaderName)
	hppfile, err := os.Create(CppHeaderName)
	if err != nil {
		return err
	}

	CppImplName := path.Join(outputFolder, baseName+".cpp");
	log.Printf("Creating \"%s\"", CppImplName)
	cppfile, err := os.Create(CppImplName)
	if err != nil {
		return err
	}

	WriteLicenseHeader(hppfile, component,
		fmt.Sprintf("This is an autogenerated C++ Header file in order to allow an easy use\n of %s", libraryname),
		true)
	WriteLicenseHeader(cppfile, component,
		fmt.Sprintf("This is an autogenerated C++ Wrapper Implementation file in order to allow \nan easy use of %s", libraryname),
		true)

	err = buildCPPHeaderAndImplementation(component, hppfile, cppfile, namespace, baseName)
	if err != nil {
		return err
	}
	return nil
}

func buildCPPHeaderAndImplementation(component ComponentDefinition, w io.Writer, cppimplw io.Writer, NameSpace string, BaseName string) error {
	// Header start code
	fmt.Fprintf(w, "\n")
	fmt.Fprintf(w, "#ifndef __%s_CPPHEADER\n", strings.ToUpper(NameSpace))
	fmt.Fprintf(w, "#define __%s_CPPHEADER\n", strings.ToUpper(NameSpace))
	fmt.Fprintf(w, "\n")

	fmt.Fprintf(w, "#include \"%s.h\"\n", BaseName)

	fmt.Fprintf(w, "#include <string>\n")
	fmt.Fprintf(w, "#include <memory>\n")
	fmt.Fprintf(w, "#include <vector>\n")
	fmt.Fprintf(w, "#include <exception>\n")
	fmt.Fprintf(w, "\n")

	fmt.Fprintf(w, "namespace %s {\n", NameSpace)
	fmt.Fprintf(w, "\n")

	fmt.Fprintf(w, "/*************************************************************************************************************************\n")
	fmt.Fprintf(w, " Forward Declaration of all classes \n")
	fmt.Fprintf(w, "**************************************************************************************************************************/\n")
	fmt.Fprintf(w, "\n")

	cppClassPrefix := "C" + NameSpace

	fmt.Fprintf(w, "class %sBaseClass;\n", cppClassPrefix)
	for i := 0; i < len(component.Classes); i++ {
		class := component.Classes[i]
		fmt.Fprintf(w, "class %s%s;\n", cppClassPrefix, class.ClassName)
	}

	fmt.Fprintf(w, "\n")

	fmt.Fprintf(w, "/*************************************************************************************************************************\n")
	fmt.Fprintf(w, " Declaration of shared pointer types \n")
	fmt.Fprintf(w, "**************************************************************************************************************************/\n")

	fmt.Fprintf(w, "\n")

	fmt.Fprintf(w, "typedef std::shared_ptr<%sBaseClass> P%sBaseClass;\n", cppClassPrefix, NameSpace)
	for i := 0; i < len(component.Classes); i++ {
		class := component.Classes[i]
		fmt.Fprintf(w, "typedef std::shared_ptr<%s%s> P%s%s;\n", cppClassPrefix, class.ClassName, NameSpace, class.ClassName)
	}

	fmt.Fprintf(w, "     \n")
	fmt.Fprintf(w, "/*************************************************************************************************************************\n")
	fmt.Fprintf(w, " Class E%sException \n", NameSpace)
	fmt.Fprintf(w, "**************************************************************************************************************************/\n")
	fmt.Fprintf(w, "class E%sException : public std::runtime_error {\n", NameSpace)
	fmt.Fprintf(w, "  protected:\n")
	fmt.Fprintf(w, "    /**\n")
	fmt.Fprintf(w, "    * Error code for the Exception.\n")
	fmt.Fprintf(w, "    */\n")
	fmt.Fprintf(w, "    %sResult m_errorcode;\n", NameSpace)
	fmt.Fprintf(w, "\n")
	fmt.Fprintf(w, "  public:\n")
	fmt.Fprintf(w, "    /**\n")
	fmt.Fprintf(w, "    * Exception Constructor.\n")
	fmt.Fprintf(w, "    */\n")
	fmt.Fprintf(w, "    E%sException (%sResult errorcode);\n", NameSpace, NameSpace)
	fmt.Fprintf(w, "\n")
	fmt.Fprintf(w, "    /**\n")
	fmt.Fprintf(w, "    * Returns error code\n")
	fmt.Fprintf(w, "    */\n")
	fmt.Fprintf(w, "    %sResult getErrorCode ();\n", NameSpace)
	fmt.Fprintf(w, "\n")

	fmt.Fprintf(w, "};\n")

	fmt.Fprintf(w, "     \n")
	fmt.Fprintf(w, "/*************************************************************************************************************************\n")
	fmt.Fprintf(w, " Class %sBaseClass \n", cppClassPrefix)
	fmt.Fprintf(w, "**************************************************************************************************************************/\n")

	fmt.Fprintf(w, "class %sBaseClass {\n", cppClassPrefix)
	fmt.Fprintf(w, "  protected:\n")

	fmt.Fprintf(w, "    /* Handle to Instance in library*/\n")
	fmt.Fprintf(w, "    %sHandle m_pHandle;\n", NameSpace)
	fmt.Fprintf(w, "\n")
	fmt.Fprintf(w, "    /* Checks for an Error code and raises Exceptions */\n")
	fmt.Fprintf(w, "    void CheckError(%sResult nResult);\n", NameSpace)
	fmt.Fprintf(w, "  public:\n")
	fmt.Fprintf(w, "\n")
	fmt.Fprintf(w, "    /**\n")
	fmt.Fprintf(w, "    * %sBaseClass::%sBaseClass - Constructor for Base class.\n", cppClassPrefix, cppClassPrefix)
	fmt.Fprintf(w, "    */\n")
	fmt.Fprintf(w, "    %sBaseClass(%sHandle pHandle);\n", cppClassPrefix, NameSpace)
	fmt.Fprintf(w, "\n")
	fmt.Fprintf(w, "    /**\n")
	fmt.Fprintf(w, "    * %sBaseClass::~%sBaseClass - Destructor for Base class.\n", cppClassPrefix, cppClassPrefix)
	fmt.Fprintf(w, "    */\n")

	fmt.Fprintf(w, "    virtual ~%sBaseClass();\n", cppClassPrefix)
	fmt.Fprintf(w, "\n")
	fmt.Fprintf(w, "    /**\n")
	fmt.Fprintf(w, "    * %sBaseClass::GetHandle - Returns handle to instance.\n", cppClassPrefix)
	fmt.Fprintf(w, "    */\n")
	fmt.Fprintf(w, "    %sHandle GetHandle();\n", NameSpace)
	fmt.Fprintf(w, "};\n")

	// Implementation start code
	fmt.Fprintf(cppimplw, "#include \"%s.hpp\"\n", BaseName)
	fmt.Fprintf(cppimplw, "\n")
	fmt.Fprintf(cppimplw, "#include <vector>\n")
	fmt.Fprintf(cppimplw, "\n")
	fmt.Fprintf(cppimplw, "namespace %s {\n", NameSpace)
	fmt.Fprintf(cppimplw, "\n")
	fmt.Fprintf(cppimplw, "/*************************************************************************************************************************\n")
	fmt.Fprintf(cppimplw, " Class E%sException \n", NameSpace)
	fmt.Fprintf(cppimplw, "**************************************************************************************************************************/\n")
	fmt.Fprintf(cppimplw, "    E%sException::E%sException(%sResult errorcode)\n", NameSpace, NameSpace, NameSpace)
	fmt.Fprintf(cppimplw, "       : std::runtime_error (\"%s Error \" + std::to_string (errorcode))\n", NameSpace)
	fmt.Fprintf(cppimplw, "    {\n")
	fmt.Fprintf(cppimplw, "        m_errorcode = errorcode;\n")
	fmt.Fprintf(cppimplw, "    }\n")
	fmt.Fprintf(cppimplw, "\n")
	fmt.Fprintf(cppimplw, "    %sResult E%sException::getErrorCode ()\n", NameSpace, NameSpace)
	fmt.Fprintf(cppimplw, "    {\n")
	fmt.Fprintf(cppimplw, "        return m_errorcode;\n")
	fmt.Fprintf(cppimplw, "    }\n")
	fmt.Fprintf(cppimplw, "\n")
	fmt.Fprintf(cppimplw, "/*************************************************************************************************************************\n")
	fmt.Fprintf(cppimplw, " Class %sBaseClass \n", cppClassPrefix)
	fmt.Fprintf(cppimplw, "**************************************************************************************************************************/\n")
	fmt.Fprintf(cppimplw, "\n")
	fmt.Fprintf(cppimplw, "    %sBaseClass::%sBaseClass(%sHandle pHandle)\n", cppClassPrefix, cppClassPrefix, NameSpace)
	fmt.Fprintf(cppimplw, "    {\n")
	fmt.Fprintf(cppimplw, "        m_pHandle = pHandle;\n")
	fmt.Fprintf(cppimplw, "    }\n")
	fmt.Fprintf(cppimplw, "\n")
	fmt.Fprintf(cppimplw, "    %sBaseClass::~%sBaseClass()\n", cppClassPrefix, cppClassPrefix)
	fmt.Fprintf(cppimplw, "    {\n")
	fmt.Fprintf(cppimplw, "        %sWrapper::%s(this);\n", cppClassPrefix, component.Global.ReleaseMethod)
	fmt.Fprintf(cppimplw, "    }\n")
	fmt.Fprintf(cppimplw, "\n")
	fmt.Fprintf(cppimplw, "    void %sBaseClass::CheckError(%sResult nResult)\n", cppClassPrefix, NameSpace)
	fmt.Fprintf(cppimplw, "    {\n")
	fmt.Fprintf(cppimplw, "        %sWrapper::CheckError(m_pHandle, nResult);\n", cppClassPrefix)
	fmt.Fprintf(cppimplw, "    }\n")
	fmt.Fprintf(cppimplw, "\n")
	fmt.Fprintf(cppimplw, "    %sHandle %sBaseClass::GetHandle()\n", NameSpace, cppClassPrefix)
	fmt.Fprintf(cppimplw, "    {\n")
	fmt.Fprintf(cppimplw, "        return m_pHandle;\n")
	fmt.Fprintf(cppimplw, "    }\n")
	fmt.Fprintf(cppimplw, "\n")

	for i := 0; i < len(component.Classes); i++ {

		class := component.Classes[i]
		cppClassName := cppClassPrefix + class.ClassName

		parentClassName := class.ParentClass
		if parentClassName == "" {
			parentClassName = "BaseClass"
		}
		cppParentClassName := cppClassPrefix + parentClassName

		fmt.Fprintf(w, "     \n")
		fmt.Fprintf(w, "/*************************************************************************************************************************\n")
		fmt.Fprintf(w, " Class %s \n", cppClassName)
		fmt.Fprintf(w, "**************************************************************************************************************************/\n")
		fmt.Fprintf(w, "class %s : public %s {\n", cppClassName, cppParentClassName)
		fmt.Fprintf(w, "  public:\n")
		fmt.Fprintf(w, "    \n")
		fmt.Fprintf(w, "    /**\n")
		fmt.Fprintf(w, "    * %s::%s - Constructor for %s class.\n", cppClassName, cppClassName, class.ClassName)
		fmt.Fprintf(w, "    */\n")
		fmt.Fprintf(w, "    %s (%sHandle pHandle);\n", cppClassName, NameSpace)

		fmt.Fprintf(cppimplw, "     \n")
		fmt.Fprintf(cppimplw, "/*************************************************************************************************************************\n")
		fmt.Fprintf(cppimplw, " Class %s \n", cppClassName)
		fmt.Fprintf(cppimplw, "**************************************************************************************************************************/\n")
		fmt.Fprintf(cppimplw, "    /**\n")
		fmt.Fprintf(cppimplw, "    * %s::%s - Constructor for %s class.\n", cppClassName, cppClassName, class.ClassName)
		fmt.Fprintf(cppimplw, "    */\n")
		fmt.Fprintf(cppimplw, "    %s::%s (%sHandle pHandle)\n", cppClassName, cppClassName, NameSpace)
		fmt.Fprintf(cppimplw, "     : %s (pHandle)\n", cppParentClassName)
		fmt.Fprintf(cppimplw, "    { }\n")

		for j := 0; j < len(class.Methods); j++ {
			method := class.Methods[j]

			err := writeCPPMethod(method, w, cppimplw, NameSpace, class.ClassName, false)
			if err != nil {
				return err
			}

		}

		fmt.Fprintf(w, "};\n\n")

	}

	// Global functions
	fmt.Fprintf(w, "     \n")
	fmt.Fprintf(w, "/*************************************************************************************************************************\n")
	fmt.Fprintf(w, " Class %sWrapper \n", cppClassPrefix)
	fmt.Fprintf(w, "**************************************************************************************************************************/\n")

	fmt.Fprintf(w, "class %sWrapper {\n", cppClassPrefix)
	fmt.Fprintf(w, "public:\n")

	fmt.Fprintf(w, "    static void CheckError(%sHandle handle, %sResult nResult);\n", NameSpace, NameSpace)

	global := component.Global;
	for j := 0; j < len(global.Methods); j++ {
		method := global.Methods[j]

		err := writeCPPMethod(method, w, cppimplw, NameSpace, "Wrapper", true)
		if err != nil {
			return err
		}
	}

	fmt.Fprintf(w, "};\n\n")

	fmt.Fprintf(w, "\n")
	fmt.Fprintf(w, "};\n")
	fmt.Fprintf(w, "\n")
	fmt.Fprintf(w, "#endif // __%s_CPPHEADER\n", strings.ToUpper(NameSpace))
	fmt.Fprintf(w, "\n")

	fmt.Fprintf(cppimplw, "\n")
	fmt.Fprintf(cppimplw, "    void %sWrapper::CheckError(%sHandle handle, %sResult nResult)\n", cppClassPrefix, NameSpace, NameSpace)
	fmt.Fprintf(cppimplw, "    {\n")
	fmt.Fprintf(cppimplw, "        if (nResult != 0) \n")
	fmt.Fprintf(cppimplw, "            throw E%sException (nResult);\n", NameSpace)
	fmt.Fprintf(cppimplw, "    }\n")
	fmt.Fprintf(cppimplw, "\n")

	fmt.Fprintf(cppimplw, "\n")
	fmt.Fprintf(cppimplw, "};\n")
	fmt.Fprintf(cppimplw, "\n")

	return nil
}

func getBindingCppParamType (param ComponentDefinitionParam, NameSpace string, isInput bool) (string) {
	cppClassPrefix := "C" + NameSpace;
	switch (param.ParamType) {
		case "uint8":
			return fmt.Sprintf ("unsigned char");
		case "uint16":
			return fmt.Sprintf ("unsigned short");
		case "uint32":
			return fmt.Sprintf ("unsigned int");
		case "uint64":
			return fmt.Sprintf ("unsigned long long");
		case "int8":
			return fmt.Sprintf ("char");
		case "int16":
			return fmt.Sprintf ("short");
		case "int32":
			return fmt.Sprintf ("int");
		case "int64":
			return fmt.Sprintf ("long long");
		case "string":
			return fmt.Sprintf ("std::string");
		case "bool":
			return fmt.Sprintf ("bool");
		case "single":
			return fmt.Sprintf ("float");
		case "basicarray":
			cppBasicType := "";
			switch (param.ParamClass) {
			case "uint8":
				cppBasicType = "unsigned char";
			case "uint16":
				cppBasicType = "unsigned short";
			case "uint32":
				cppBasicType = "unsigned int";
			case "uint64":
				cppBasicType = "unsigned long long";
			case "int8":
				cppBasicType = "char";
			case "int16":
				cppBasicType = "short";
			case "int32":
				cppBasicType = "int";
			case "int64":
				cppBasicType = "long long";
			case "bool":
				cppBasicType = "bool";
			case "single":
				cppBasicType = "float";
			case "double":
				cppBasicType = "double";
			default:
				log.Fatal ("Invalid parameter type: ", param.ParamClass);
			}
			return fmt.Sprintf ("std::vector<%s>", cppBasicType);
		case "structarray":
			return fmt.Sprintf ("std::vector<s%s%s>", NameSpace, param.ParamClass);
		case "double":
			return fmt.Sprintf ("double");
		case "enum":
			return fmt.Sprintf ("e%s%s", NameSpace, param.ParamClass);
		case "struct":
			return fmt.Sprintf ("s%s%s", NameSpace, param.ParamClass);
		case "handle":
			if (isInput) {
				return fmt.Sprintf ("%s%s *", cppClassPrefix, param.ParamClass);
			}
			return fmt.Sprintf ("P%s%s", NameSpace, param.ParamClass);
		case "functiontype":
			return fmt.Sprintf ("%s%s", NameSpace, param.ParamClass);
	}
	
	log.Fatal ("Invalid parameter type: ", param.ParamType);
	return "";
}

func getBindingCppVariableName (param ComponentDefinitionParam) (string) {
	switch (param.ParamType) {
		case "uint8", "uint16", "uint32", "uint64", "int8", "int16", "int32", "int64":
			return "n" + param.ParamName;
		case "string":
			return "s" + param.ParamName;
		case "bool":
			return "b" + param.ParamName;
		case "single":
			return "f" + param.ParamName;
		case "basicarray", "structarray":
			return param.ParamName + "Buffer";
		case "double":
			return "d" + param.ParamName;
		case "enum":
			return "e" + param.ParamName;
		case "struct":
			return param.ParamName;
		case "handle":
			return "p" + param.ParamName;
		case "functiontype":
			return fmt.Sprintf ("p%s", param.ParamName);
	}

	log.Fatal ("Invalid parameter type: ", param.ParamType);
	
	return "";
}

func writeCPPMethod(method ComponentDefinitionMethod, w io.Writer, cppimplw io.Writer, NameSpace string, ClassName string, isGlobal bool) error {

	CMethodName := ""
	requiresInitCall := false;
	initCallParameters := ""	// usually used to check sizes of buffers
	callParameters := ""
	staticPrefix := ""
	checkErrorCode := ""

	if isGlobal {
		CMethodName = fmt.Sprintf("%s_%s%s", strings.ToLower(NameSpace), strings.ToLower(method.MethodName), method.DLLSuffix)
		staticPrefix = "static "
		checkErrorCode = "CheckError (nullptr,"
	} else {
		CMethodName = fmt.Sprintf("%s_%s_%s%s", strings.ToLower(NameSpace), strings.ToLower(ClassName), strings.ToLower(method.MethodName), method.DLLSuffix)
		callParameters = "m_pHandle"
		initCallParameters = "m_pHandle"
		checkErrorCode = "CheckError ("
	}

	parameters := ""
	returntype := "void"

	definitionCode := "";
	functioncode := ""
	returncode := ""
	commentcode := ""
	postCallCode := ""

	cppClassPrefix := "C" + NameSpace
	cppClassName := cppClassPrefix + ClassName

	for k := 0; k < len(method.Params); k++ {

		param := method.Params[k]
		variableName := getBindingCppVariableName(param)

		callParameter := "";
		initCallParameter := "";

		switch param.ParamPass {
		case "in":

			if parameters != "" {
				parameters = parameters + ", "
			}

			cppParamType := getBindingCppParamType(param, NameSpace, true)
			commentcode = commentcode + fmt.Sprintf("    * @param[in] %s - %s\n", variableName, param.ParamDescription)

			switch param.ParamType {
			case "string":
				callParameter = variableName + ".c_str()"
				initCallParameter = callParameter;
				parameters = parameters + fmt.Sprintf("const %s & %s", cppParamType, variableName);
			case "struct":
				callParameter = "&" + variableName
				initCallParameter = callParameter;
				parameters = parameters + fmt.Sprintf("const %s & %s", cppParamType, variableName);
			case "structarray", "basicarray":
				callParameter = fmt.Sprintf("(unsigned int)%s.size(), %s.data()", variableName, variableName);
				initCallParameter = callParameter;
				parameters = parameters + fmt.Sprintf("const %s & %s", cppParamType, variableName);
			case "handle":
				functioncode = functioncode + fmt.Sprintf("        %sHandle h%s = nullptr;\n", NameSpace, param.ParamName)
				functioncode = functioncode + fmt.Sprintf("        if (%s != nullptr) {\n", variableName)
				functioncode = functioncode + fmt.Sprintf("            h%s = %s->GetHandle ();\n", param.ParamName, variableName)
				functioncode = functioncode + fmt.Sprintf("        };\n")
				callParameter = "h" + param.ParamName;
				initCallParameter = callParameter;
				parameters = parameters + fmt.Sprintf("%s %s", cppParamType, variableName)

			default:
				callParameter = variableName;
				initCallParameter = callParameter;
				parameters = parameters + fmt.Sprintf("const %s %s", cppParamType, variableName)
			}

		case "out":
			cppParamType := getBindingCppParamType(param, NameSpace, false)
			commentcode = commentcode + fmt.Sprintf("    * @param[out] %s - %s\n", variableName, param.ParamDescription)

			if parameters != "" {
				parameters = parameters + ", "
			}
			parameters = parameters + fmt.Sprintf("%s & %s", cppParamType, variableName)

			switch param.ParamType {

			case "string":
				requiresInitCall = true;
				definitionCode = definitionCode + fmt.Sprintf("        unsigned int bytesNeeded%s = 0;\n", param.ParamName)
				definitionCode = definitionCode + fmt.Sprintf("        unsigned int bytesWritten%s = 0;\n", param.ParamName)
				initCallParameter = fmt.Sprintf("0, &bytesNeeded%s, nullptr", param.ParamName);
				
				functioncode = functioncode + fmt.Sprintf("        std::vector<char> buffer%s;\n", param.ParamName)
				functioncode = functioncode + fmt.Sprintf("        buffer%s.resize(bytesNeeded%s + 2);\n", param.ParamName, param.ParamName)

				callParameter = fmt.Sprintf("bytesNeeded%s + 2, &bytesWritten%s, &buffer%s[0]", param.ParamName, param.ParamName, param.ParamName)

				postCallCode = postCallCode + fmt.Sprintf("        buffer%s[bytesNeeded%s + 1] = 0;\n", param.ParamName, param.ParamName) +
					fmt.Sprintf("        s%s = std::string(&buffer%s[0]);\n", param.ParamName, param.ParamName)

			case "handle":
				// NOTTESTED
				definitionCode = definitionCode + fmt.Sprintf("        %sHandle h%s = nullptr;\n", NameSpace, param.ParamName)
				callParameter = fmt.Sprintf("&h%s", param.ParamName)
				initCallParameter = callParameter;
				postCallCode = postCallCode + fmt.Sprintf("        p%s = std::make_shared<%s%s> (h%s);\n", param.ParamName, cppClassPrefix, param.ParamClass, param.ParamName)

			case "structarray", "basicarray":
				requiresInitCall = true;
				definitionCode = definitionCode + fmt.Sprintf("        unsigned int elementsNeeded%s = 0;\n", param.ParamName)
				definitionCode = definitionCode + fmt.Sprintf("        unsigned int elementsWritten%s = 0;\n", param.ParamName)
				initCallParameter = fmt.Sprintf("0, &elementsNeeded%s, nullptr", param.ParamName);

				functioncode = functioncode + fmt.Sprintf("        %s.resize(elementsNeeded%s);\n", variableName, param.ParamName);
				callParameter = fmt.Sprintf("elementsNeeded%s, &elementsWritten%s, %s.data()", param.ParamName, param.ParamName, variableName)

			default:
				callParameter = "&" + variableName
				initCallParameter = callParameter
			}

		case "return":

			commentcode = commentcode + fmt.Sprintf("    * @return %s\n", param.ParamDescription)
			returntype = getBindingCppParamType(param, NameSpace, false)

			switch param.ParamType {
			case "uint8", "uint16", "uint32", "uint64", "int8", "int16", "int32", "int64", "bool", "single", "double":
				callParameter = fmt.Sprintf("&result%s", param.ParamName)
				initCallParameter = callParameter;
				definitionCode = definitionCode + fmt.Sprintf("        %s result%s = 0;\n", returntype, param.ParamName)
				returncode = fmt.Sprintf("        return result%s;\n", param.ParamName)

			case "string":
				requiresInitCall = true;
				definitionCode = definitionCode + fmt.Sprintf("        unsigned int bytesNeeded%s = 0;\n", param.ParamName)
				definitionCode = definitionCode + fmt.Sprintf("        unsigned int bytesWritten%s = 0;\n", param.ParamName)
				initCallParameter = fmt.Sprintf("0, &bytesNeeded%s, nullptr", param.ParamName);

				functioncode = functioncode + fmt.Sprintf("        std::vector<char> buffer%s;\n", param.ParamName)
				functioncode = functioncode + fmt.Sprintf("        buffer%s.resize(bytesNeeded%s + 2);\n", param.ParamName, param.ParamName)

				callParameter = fmt.Sprintf("bytesNeeded%s + 2, &bytesWritten%s, &buffer%s[0]", param.ParamName, param.ParamName, param.ParamName)

				returncode = fmt.Sprintf("        buffer%s[bytesNeeded%s + 1] = 0;\n", param.ParamName, param.ParamName) +
					fmt.Sprintf("        return std::string(&buffer%s[0]);\n", param.ParamName)

			case "enum":
				callParameter = fmt.Sprintf("&result%s", param.ParamName)
				initCallParameter = callParameter;
				definitionCode = definitionCode + fmt.Sprintf("        e%s%s result%s = (e%s%s) 0;\n", NameSpace, param.ParamClass, param.ParamName, NameSpace, param.ParamClass)
				returncode = fmt.Sprintf("        return result%s;\n", param.ParamName)

			case "struct":
				callParameter = fmt.Sprintf("&result%s", param.ParamName)
				initCallParameter = callParameter;
				definitionCode = definitionCode + fmt.Sprintf("        s%s%s result%s;\n", NameSpace, param.ParamClass, param.ParamName)
				returncode = fmt.Sprintf("        return result%s;\n", param.ParamName)

			case "handle":
				definitionCode = definitionCode + fmt.Sprintf("        %sHandle h%s = nullptr;\n", NameSpace, param.ParamName)
				callParameter = fmt.Sprintf("&h%s", param.ParamName)
				initCallParameter = callParameter;
				returncode = fmt.Sprintf("        return std::make_shared<%s%s> (h%s);\n", cppClassPrefix, param.ParamClass, param.ParamName)

			case "basicarray":
				return fmt.Errorf("can not return basicarray \"%s\" for %s.%s (%s)", param.ParamPass, ClassName, method.MethodName, param.ParamName)

			case "structarray":
				return fmt.Errorf("can not return structarray \"%s\" for %s.%s (%s)", param.ParamPass, ClassName, method.MethodName, param.ParamName)

			default:
				return fmt.Errorf("invalid method parameter type \"%s\" for %s.%s (%s)", param.ParamType, ClassName, method.MethodName, param.ParamName)
			}

		default:
			return fmt.Errorf("invalid method parameter passing \"%s\" for %s.%s (%s)", param.ParamPass, ClassName, method.MethodName, param.ParamName)
		}

		if callParameters != "" {
			callParameters = callParameters + ", "
		}
		callParameters = callParameters + callParameter;
		if (initCallParameters != "") {
			initCallParameters = initCallParameters + ", ";
		}
		initCallParameters = initCallParameters + initCallParameter;

	}

	fmt.Fprintf(w, "    \n")
	fmt.Fprintf(w, "    /**\n")
	fmt.Fprintf(w, "    * %s::%s - %s\n", cppClassName, method.MethodName, method.MethodDescription)
	fmt.Fprintf(w, commentcode)
	fmt.Fprintf(w, "    */\n")
	fmt.Fprintf(w, "    %s%s %s (%s);\n", staticPrefix, returntype, method.MethodName, parameters)

	fmt.Fprintf(cppimplw, "    \n")
	fmt.Fprintf(cppimplw, "    /**\n")
	fmt.Fprintf(cppimplw, "    * %s::%s - %s\n", cppClassName, method.MethodName, method.MethodDescription)
	fmt.Fprintf(cppimplw, commentcode)
	fmt.Fprintf(cppimplw, "    */\n")
	fmt.Fprintf(cppimplw, "    %s %s::%s (%s)\n", returntype, cppClassName, method.MethodName, parameters)
	fmt.Fprintf(cppimplw, "    {\n")
	fmt.Fprintf(cppimplw, definitionCode)
	if (requiresInitCall) {
		fmt.Fprintf(cppimplw, "        %s %s (%s) );\n", checkErrorCode, CMethodName, initCallParameters)
	}
	fmt.Fprintf(cppimplw, functioncode)
	fmt.Fprintf(cppimplw, "        %s %s (%s) );\n", checkErrorCode, CMethodName, callParameters)
	fmt.Fprintf(cppimplw, postCallCode)
	fmt.Fprintf(cppimplw, returncode)
	fmt.Fprintf(cppimplw, "    }\n")

	return nil
}
