/*++

Copyright (C) 2018 Autodesk Inc. (Original Author)

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

--*/

//////////////////////////////////////////////////////////////////////////////////////////////////////
// buildbindingccppdocumentation.go.go
// functions to generate the Sphinx documentation of a library's C++-bindings
//////////////////////////////////////////////////////////////////////////////////////////////////////

package main

import (
	"fmt"
	"log"
	"path"
)


// BuildCCPPDocumentation builds the Sphinx documentation of a library's C++-bindings
func BuildCCPPDocumentation(component ComponentDefinition, outputFolder string, ClassIdentifier string) (error) {
	BaseName := component.BaseName

	globalFileName := path.Join(outputFolder, BaseName + ".rst")
	log.Printf("Creating \"%s\"", globalFileName)
	globalDocFile, err := CreateLanguageFile(globalFileName, "\t")
	if err != nil {
		return err
	}
	err = buildCCPPDocumentationGlobal(component, globalDocFile, ClassIdentifier)
	if err != nil {
		return err
	}

	typesFileName := path.Join(outputFolder, BaseName + "_types.rst")
	log.Printf("Creating \"%s\"", typesFileName)
	typesDocFile, err := CreateLanguageFile(typesFileName, "\t")
	if err != nil {
		return err
	}
	err = buildCCPPDocumentationTypes(component, typesDocFile, ClassIdentifier)
	if err != nil {
		return err
	}
	
	for i := 0; i < len(component.Classes); i++ {
		class := component.Classes[i]
		classFileName := path.Join(outputFolder, BaseName + "_" + class.ClassName + ".rst")
		log.Printf("Creating \"%s\"", classFileName)
		classDocFile, err := CreateLanguageFile(classFileName, "\t")
		if err != nil {
			return err
		}
		err = buildCCPPDocumentationClass(component, classDocFile, class, ClassIdentifier)
		if err != nil {
			return err
		}

	}


	// write types file
	// write global file
	// write classes file

	// CppHeader := path.Join(outputFolder, baseName+"_implicit.hpp")
	// log.Printf("Creating \"%s\"", CppHeader)
	// hppfile, err := CreateLanguageFile(CppHeader, indentString)
	// if err != nil {
	// 	return err
	// }
	// hppfile.WriteCLicenseHeader(component,
	// 	fmt.Sprintf("This is an autogenerated C++-Header file in order to allow an easy\n use of %s", libraryname),
	// 	true)
	return nil
}

func writeCPPDocumentationFunctionPointer(component ComponentDefinition, w LanguageWriter,
	functiontype ComponentDefinitionFunctionType) (error) {
	
	NameSpace := component.NameSpace
	returnType := "void"
	parameters := ""

	for j := 0; j < len(functiontype.Params); j++ {
		param := functiontype.Params[j]

		cParamTypeName, err := getCPPParameterTypeName(param.ParamType, NameSpace, param.ParamClass);
		if (err != nil) {
			return err;
		}
		if (parameters != "") {
			parameters = parameters + ", "
		}
		if (param.ParamPass == "in") {
			parameters = parameters + cParamTypeName
		} else {
			parameters = parameters + cParamTypeName + "*"
		}
	}
	w.Writeln("  .. cpp:type:: %s = %s(*)(%s)", functiontype.FunctionName, returnType, parameters)
	w.Writeln("    ")
	w.Writeln("    %s", functiontype.FunctionDescription)
	w.Writeln("    ")

	for j := 0; j < len(functiontype.Params); j++ {
		param := functiontype.Params[j]

		cParams, err := generateCCPPParameter(param, "", functiontype.FunctionName, NameSpace, true)
		if (err != nil) {
			return err;
		}
		for _, cParam := range cParams {
			w.Writeln("    %s", cParam.ParamDocumentationLine);
		}
	}
	w.Writeln("    ")

	return nil
}


func buildCCPPDocumentationGlobal(component ComponentDefinition, w LanguageWriter, ClassIdentifier string) (error) {

	NameSpace := component.NameSpace
	LibraryName := component.LibraryName
	global := component.Global

	wrapperName := "C"+ClassIdentifier+"Wrapper"

	w.Writeln("")
	w.Writeln("The wrapper class %s", wrapperName)
	w.Writeln("===================================================================================")
	w.Writeln("")
	w.Writeln("")
	w.Writeln(".. cpp:class:: %s::%s", NameSpace, wrapperName)

	w.Writeln("")
	w.Writeln("  All types of %s reside in the namespace %s and all", LibraryName, NameSpace)
	w.Writeln("  functionality of %s resides in %s::%s.", LibraryName, NameSpace, wrapperName)
	w.Writeln("")
	w.Writeln("  A suitable way to use %s::%s is as a singleton.", NameSpace, wrapperName)
	w.Writeln("")

	
	for j := 0; j < len(global.Methods); j++ {
		method := global.Methods[j]

		parameters, returntype, err := getDynamicCPPMethodParameters(method, NameSpace, ClassIdentifier, "Wrapper")
		if (err != nil) {
			return err
		}
		w.Writeln("  .. cpp:function:: %s %s(%s)", returntype, method.MethodName, parameters)
		w.Writeln("  ")
		w.Writeln("    %s", method.MethodDescription)
		w.Writeln("  ")
		writeCPPDocumentationParameters(method, w, NameSpace)
		w.Writeln("  ")
	}

	// Load library functions
	// check error functions

	return nil
}


func writeCPPDocumentationParameters(method ComponentDefinitionMethod, w LanguageWriter, NameSpace string) {
	for k := 0; k < len(method.Params); k++ {
		param := method.Params[k]
		variableName := getBindingCppVariableName(param)
		if (param.ParamPass == "return") {
			w.Writeln("    :returns: %s", param.ParamDescription )
		} else {
			w.Writeln("    :param %s: %s ", variableName, param.ParamDescription)
		}
	}
	w.Writeln("")
}

func buildCCPPDocumentationClass(component ComponentDefinition, w LanguageWriter, class ComponentDefinitionClass, ClassIdentifier string) (error) {
	
	NameSpace := component.NameSpace
	className := "C"+ClassIdentifier+class.ClassName

	w.Writeln("")
	w.Writeln("%s", className)
	w.Writeln("====================================================================================================")
	w.Writeln("")
	w.Writeln("")
	
	_, inheritanceSpecifier := getCPPInheritanceSpecifier(component, class, "C", ClassIdentifier)

	w.Writeln(".. cpp:class:: %s::%s %s", NameSpace, className, inheritanceSpecifier)
	w.Writeln("")
	w.Writeln("  %s", class.ClassDescription)
	w.Writeln("")
	w.Writeln("")

	w.Writeln("")
	w.Writeln("")
	for j := 0; j < len(class.Methods); j++ {
		method := class.Methods[j]

		parameters, returntype, err := getDynamicCPPMethodParameters(method, NameSpace, ClassIdentifier, class.ClassName)
		if (err != nil) {
			return err
		}
		w.Writeln("  .. cpp:function:: %s %s(%s)", returntype, method.MethodName, parameters)
		w.Writeln("")
		w.Writeln("    %s", method.MethodDescription)
		w.Writeln("")
		writeCPPDocumentationParameters(method, w, NameSpace)
		w.Writeln("")
	}

	w.Writeln(".. cpp:type:: std::shared_ptr<%s> %s::P%s%s", className, NameSpace, ClassIdentifier, class.ClassName)
	w.Writeln("")
	w.Writeln("  Shared pointer to %s to easily allow reference counting.", className)
	w.Writeln("")

	return nil
}

func buildCCPPDocumentationTypes(component ComponentDefinition, w LanguageWriter, ClassIdentifier string) (error) {
	
	NameSpace := component.NameSpace
	LibraryName := component.LibraryName
	// BaseName := component.BaseName

	w.Writeln("")
	w.Writeln("Types of %s", LibraryName)
	w.Writeln("====================================================================================================")
	w.Writeln("")
	w.Writeln("")
	w.Writeln("Simple types")
	w.Writeln("--------------")
	w.Writeln("")
	types := []string{"uint8", "uint16", "uint32", "uint64", "int8", "int16", "int32", "int64"} 
	for _, _type := range types {
		w.Writeln("  .. cpp:type:: %s_t %s_%s", _type, NameSpace, _type)
		w.Writeln("  ")
	} 
	w.Writeln("  .. cpp:type:: float %s_single", NameSpace)
	w.Writeln("  ")
	w.Writeln("  .. cpp:type:: double %s_double", NameSpace)
	w.Writeln("  ")
	w.Writeln("  ")

	if len(component.Enums) > 0 {
		w.Writeln("")
		w.Writeln("Enumerations")
		w.Writeln("--------------")
		w.Writeln("")

		for i := 0; i < len(component.Enums); i++ {
			enum := component.Enums[i]
			w.Writeln("  .. cpp:enum-class:: e%s : %s_int32", enum.Name, NameSpace);
			w.Writeln("  ")
			// w.Writeln("  %s", enum.Description)
			for j := 0; j < len(enum.Options); j++ {
				option := enum.Options[j];
				w.Writeln("    .. cpp:enumerator:: %s = %d", option.Name, option.Value);
			}
			w.Writeln("  ");
		}
	}
	
	if len(component.Structs) > 0 {
		w.Writeln("")
		w.Writeln("Structs")
		w.Writeln("--------------")
		w.Writeln("")
		w.Writeln("  All structs are defined to be packed, i.e. with the pragma pack");
		w.Writeln("");

		for i := 0; i < len(component.Structs); i++ {
			structinfo := component.Structs[i];
			w.Writeln("  .. cpp:struct:: s%s", structinfo.Name);
			w.Writeln("  ");
			for j := 0; j < len(structinfo.Members); j++ {
				member := structinfo.Members[j];
				arraysuffix := "";
				if (member.Rows > 0) {
					if (member.Columns > 0) {
						arraysuffix = fmt.Sprintf ("[%d][%d]", member.Columns, member.Rows)
					} else {
						arraysuffix = fmt.Sprintf ("[%d]",member.Rows)
					}
				}
				memberLine, err:= getCPPMemberLine(member, NameSpace, arraysuffix, structinfo.Name, "")
				if (err!=nil) {
					return err
				}
				w.Writeln("    .. cpp:member:: %s", memberLine)
				w.Writeln("  ");
			}
			w.Writeln("");
		}
	}
	
	if len(component.Functions) > 0 {
		w.Writeln("")
		w.Writeln("Function types")
		w.Writeln("---------------")
		w.Writeln("")
		w.Writeln("")
		for i := 0; i < len(component.Functions); i++ {
			functiontype := component.Functions[i]
			err := writeCPPDocumentationFunctionPointer(component, w, functiontype)
			if (err!=nil) {
				return err
			}
		}
		w.Writeln("")
	}

	
	// Exception
	// InputvectorWrapper


	return nil
}
